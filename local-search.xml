<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>🍕科研煲粥与食用手册</title>
    <link href="/index/"/>
    <url>/index/</url>
    
    <content type="html"><![CDATA[<h1 id="🍕科研煲粥与食用手册"><a href="#🍕科研煲粥与食用手册" class="headerlink" title="🍕科研煲粥与食用手册"></a>🍕科研煲粥与食用手册</h1><p><img src="http://yrqzxh.com/gsdoc/shanbei.php" alt="扇贝单词"></p><blockquote><p>🙌<strong>写这个文档的目的</strong></p><ul><li>快速入门，掌握各种技巧，提高效率</li><li>节省自己和他人的宝贵时间</li></ul></blockquote><p>文档除了在服务器连接，使用和环境搭建等方面做了说明之外，还包含了一些使用技巧，可以各取所需。</p><blockquote><p>🛠️<strong>修改日志</strong></p><ul><li>2021年9月24日，增加了Anaconda的安装教程；🍔</li><li>2021年9月29日，纠正了部分拼写错误，添加和纠正部分描述；🍟</li><li>2021年10月10日，添加部分描述；🌭</li><li>2021年10月24日，添加VScode使用SFTP扩展的教程；🍿</li><li>2021年11月6日，更新服务器资源，更改部分说明；🍞</li><li>2021年12月20日，添加部分说明；🥯</li><li>2022年3月6日，服务器科学上网方式更新为socks5代理；🥪</li><li>2022年3月9日，服务器科学上网方式回滚为http代理（因 <code>wget</code>不支持socks5代理🥲）；🍜</li><li>2022年3月10日，添加部分说明；🎂</li><li>2022年3月24日，修改VSCode选择环境的说明；🍩</li><li>2022年3月29日，修改密钥生成的部分说明；🍥</li><li>2022年3月30日，添加screen内使用鼠标滚轮的部分说明；🍗</li></ul></blockquote><h2 id="🎨实验室服务器资源"><a href="#🎨实验室服务器资源" class="headerlink" title="🎨实验室服务器资源"></a>🎨实验室服务器资源</h2><p>Note: 统计截至2022年3月6日。</p><table><thead><tr><th align="left">服务器</th><th align="left">CPU</th><th align="left">内存</th><th align="left">显卡配置</th></tr></thead><tbody><tr><td align="left">🔴A1</td><td align="left">i7-7700K</td><td align="left">64GB</td><td align="left">TITAN X(Pascal) 12GB &amp; TITAN XP 12GB</td></tr><tr><td align="left">🟠A2</td><td align="left">i7-8700K</td><td align="left">64GB</td><td align="left">GTX 1080Ti 11GB &amp; TITAN XP 12GB</td></tr><tr><td align="left">🟡B</td><td align="left">i7-5930K</td><td align="left">48GB</td><td align="left">GTX 1080Ti 11GB &amp; TITAN XP 12GB</td></tr><tr><td align="left">🟢C</td><td align="left">i7-9700K</td><td align="left">64GB</td><td align="left">RTX 2080Ti 11GB &amp; RTX 2080Ti 11GB</td></tr><tr><td align="left">🟣D</td><td align="left">R7 3800X</td><td align="left">64GB</td><td align="left">RTX 2080Ti 11GB &amp; RTX 2080Ti 11GB</td></tr><tr><td align="left">🔵E1</td><td align="left">R9 5900X</td><td align="left">64GB</td><td align="left">RTX 3090 24GB &amp; RTX 3090 24GB</td></tr><tr><td align="left">🟪E2</td><td align="left">R9 5900X</td><td align="left">64GB</td><td align="left">RTX 3090 24GB &amp; RTX 3090 24GB</td></tr><tr><td align="left">🟩F1</td><td align="left">R9 5900X</td><td align="left">64GB</td><td align="left">RTX 3090 24GB &amp; RTX 3090 24GB</td></tr></tbody></table><p>所有服务器均安装Ubuntu 16.04或者Ubuntu18.04的Linux 桌面发行版，<strong>但不提供远程桌面连接，只能通过SSH访问</strong>。</p><p>服务器显卡的7天内使用情况可以在网页查看：<a href="http://www.yrqzxh.com/server/">GPU使用情况</a></p><h2 id="🔓SSH连接"><a href="#🔓SSH连接" class="headerlink" title="🔓SSH连接"></a>🔓SSH连接</h2><p>ssh是我们常用的连接服务器的方式，在使用ssh连接服务器时一般需要指定用户名 <code>user</code>、主机IP <code>host</code>和端口号 <code>port</code>，通用的ssh命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ssh user@host -p port<br></code></pre></div></td></tr></table></figure><p>Note: 在提示输入密码时，键入的任何字符都不会显示在终端中，输入密码回车即可，每次登陆有三次输入密码的机会。</p><p>很多地方都提供了ssh工具，如Windows 10自带的cmd和powershell、Windows 10中的wsl、Putty、Xshell和Xterm等等，这里主要介绍两款常用的连接服务器的工具。</p><p><strong>实验室服务器的IP和端口号具体可参见：</strong><a href="https://docs.qq.com/sheet/DSVVVem1QaGVBV2dm">腾讯文档 服务器列表</a>（请向文档拥有者申请查看权限）</p><p>Warning: 请勿将服务器IP与端口号泄露给他人，防止他人爆破或攻击服务器。</p><p>Note: 列表中同一地址的服务器属于同一局域网，LAN IP已列出，可以通过局域网快速传输文件(1Gbps)。</p><h3 id="🔸MobaXterm"><a href="#🔸MobaXterm" class="headerlink" title="🔸MobaXterm"></a>🔸MobaXterm</h3><p>MobaXterm是一款强大的远程连接软件，提供了SSH、RDP、VNC等远程连接工具和FTP、SFTP等文件传输工具，内置X11 Forwarding和SSH隧道，免费使用。</p><p><img src="/image/base/1628845323118.png"></p><p>在使用时，只需要新建Session，选择SSH，填入指定的参数即可，连接后，左边会显示服务器的文件列表，传输协议为SFTP，可以直接<strong>拖动文件</strong>进行传输。</p><p><img src="/image/base/1628845531819.png"></p><p>MobaXterm可以记住密码，不必再每次连接都输入密码。相关设置可参考：<a href="https://blog.csdn.net/feikillyou/article/details/109130260">Mobaxterm SSH连接设置保存密码</a>。另外在右侧终端中，选中即复制，右键即粘贴，也是可以设置的：<a href="https://www.jianshu.com/p/c9feb28b7975">如何设置MobaXterm内鼠标右键粘贴的快捷键</a>。如果连接服务器无操作时经常自动断开，请勾选设置中 <code>SSH keepalive</code>选项：</p><p><img src="/image/base/1628846763100.png"></p><p><a href="https://mobaxterm.mobatek.net/download-home-edition.html">MobaXterm下载链接</a></p><h3 id="🔸Windows-Terminal"><a href="#🔸Windows-Terminal" class="headerlink" title="🔸Windows Terminal"></a>🔸Windows Terminal</h3><p>相比复杂功能的MobaXterm，Windows Terminal则更加轻便，它只提供最基本的终端功能。可以直接在Windows 10的<strong>应用商店</strong>免费获取。</p><p>在使用时，点击标题栏的下拉按钮，添加新的配置文件，在命令行内填入 <code>ssh -o ServerAliveInterval=60 user@host -p port</code>，自定义名称、外观、图标等等即可。注：此处的 <code>-o ServerAliveInterval=60</code>也是为了稳定与服务器的连接，和MobaXterm中的 <code>SSH keepalive</code>选项相同作用。</p><p><img src="/image/base/1628846986049.png"></p><p>保存之后便可以通过下拉菜单连接指定的服务器，也可以在设置中选择默认打开的选项卡。</p><p>更多有关Windows Terminal的技巧，请参见：<a href="https://docs.microsoft.com/zh-cn/windows/terminal/">什么是 Windows 终端</a>。</p><p>这里载介绍一款新的终端软件，比Windows Terminal功能要多一些，同时保持了简单易用的特性，但是启动和内存占用多了一些，链接地址<a href="https://tabby.sh/app">Tabby</a>，附一张截图：</p><p><img src="/image/index/1648099041908.png" alt="1648099041908.png"></p><h3 id="🔸X11-Forwarding"><a href="#🔸X11-Forwarding" class="headerlink" title="🔸X11 Forwarding"></a>🔸X11 Forwarding</h3><p>虽然服务器没有提供远程桌面连接的服务，但并不代表不能使用服务器上GUI程序，X11 Forwarding提供了一种在本地运行远程服务器图像化程序的途径。</p><p>Linux下执行一个GUI程序通常需要两个部分来完成，X server与X client。X server是专门负责显示用户界面的，它管理显示器，键盘以及鼠标，通常看到的桌面系统即是由它驱动的，X client则负责程序的逻辑，如果需要使用用户界面，则通过给X server发送请求来完成。通常情况下，X server与X client都运行在同一台机器上。但因为X系统当初设计成是通过socket在X server与X client之间通信的，所以它们也可以运行在不同的机器上。</p><p>X11 Forwarding就提供了一个方法，在远程机器上执行X client程序（如PyCharm），但是在本地机器上显示（即运行X server），MobaXterm自带了X11服务器，自动启用，不需要在额外配置。</p><p><img src="/image/base/1628919166596.png"></p><p>这样就可以使用命令打开任何服务器上的GUI程序，如查看图片 <code>xdp-open</code>，编辑文件 <code>gedit</code>，打开PyCharm，打开文件管理器 <code>nautilus</code>等等。</p><h2 id="🔞Linux入门"><a href="#🔞Linux入门" class="headerlink" title="🔞Linux入门"></a>🔞Linux入门</h2><h3 id="🔸目录结构"><a href="#🔸目录结构" class="headerlink" title="🔸目录结构"></a>🔸目录结构</h3><p>Linux的文件系统与Windows的虚拟磁盘不同，不过只需要了解这几个就可以了：</p><p><code>/</code>：根目录，所有的目录都是由根目录衍生出来的。</p><p><code>/home</code>：家目录，每个用户的文件夹都在这里面存放，每个用户单独存放，登录时，默认进入的就是自己的用户目录 <code>/home/user</code>。**<code>~</code>也是代表自己的用户目录**。</p><p><code>/mnt</code>：这个目录一般用来挂载一些硬盘，用来存放数据集。</p><p><strong><code>.</code>表示当前目录，<code>..</code>表示上一级目录</strong>。</p><h3 id="🔸基本命令"><a href="#🔸基本命令" class="headerlink" title="🔸基本命令"></a>🔸基本命令</h3><p><code>ls</code>: 列出目录及文件名，添加参数 <code>-all</code>可以查看文件或文件夹权限，软链接等等</p><p><code>pwd</code>：显示目前的目录</p><p><code>mkdir</code>：创建一个新的目录</p><p><code>cp</code>: 复制文件或目录，<code>-r</code>： 递归持续复制，用于目录的复制</p><p><code>rm</code>: 删除文件或目录，<code>-r </code>：递归删除，用于目录的删除</p><p><code>mv</code>: 移动文件与目录，或修改文件与目录的名称</p><p><code>cd</code>：切换目录</p><hr><p><code>cat</code>：由第一行开始显示文件内容</p><p><code>tail</code>：查看文件末尾内容，<code>-f</code>：实时监测文件末尾内容，<code>Ctrl+C</code>退出</p><hr><p><code>ps</code>：（英文全拼：process status）命令用于显示当前进程的状态，类似于 Windows 的任务管理器。</p><p>查看系统进程，包含用户、PID和命令等信息：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ps -ef<br></code></pre></div></td></tr></table></figure><p>查找指定进程：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ps -ef | grep 进程关键字/PID<br></code></pre></div></td></tr></table></figure><p>例如显示python的进程：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ps -ef | grep python<br></code></pre></div></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">root</span>      <span class="hljs-number">1027</span>     <span class="hljs-number">1</span>  <span class="hljs-number">0</span> <span class="hljs-number">8</span>月<span class="hljs-number">10</span> ?       <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> /usr/bin/python3 /usr/bin/networkd-dispatcher --run-startup-triggers<br><span class="hljs-attribute">root</span>      <span class="hljs-number">1089</span>     <span class="hljs-number">1</span>  <span class="hljs-number">0</span> <span class="hljs-number">8</span>月<span class="hljs-number">10</span> ?       <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">46</span> /usr/bin/python3 /usr/bin/fail2ban-server -xf start<br><span class="hljs-attribute">root</span>      <span class="hljs-number">1130</span>     <span class="hljs-number">1</span>  <span class="hljs-number">0</span> <span class="hljs-number">8</span>月<span class="hljs-number">10</span> ?       <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> /usr/bin/python3 /usr/share/unattended-upgrades/unattended-upgrade-shutdown --wait-for-signal<br></code></pre></div></td></tr></table></figure><p>结束进程：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">kill</span> xxx<br></code></pre></div></td></tr></table></figure><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">kill</span> 1130<br></code></pre></div></td></tr></table></figure><p>Note: 普通用户只能kill自己的进程，管理员用户可以使用sudo强制停止其他人的进程。</p><hr><p>查看端口占用情况：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">netstat -nltp<br></code></pre></div></td></tr></table></figure><hr><p>更多请参考：</p><p><a href="https://www.runoob.com/linux/linux-file-content-manage.html">Linux 文件与目录管理</a></p><p><a href="https://www.runoob.com/linux/linux-comm-ps.html">Linux ps 命令</a></p><p><a href="https://www.runoob.com/linux/linux-comm-kill.html">Linux kill命令</a></p><h3 id="🔸Vim编辑文件"><a href="#🔸Vim编辑文件" class="headerlink" title="🔸Vim编辑文件"></a>🔸Vim编辑文件</h3><p>Vim是从 vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。</p><p><strong>总结一下就是：</strong><code>i</code>进入编辑模式，左下角变 <code>Insert</code>，按 <code>Esc</code>退出编辑模式，输入英文标点 <code>:</code>进入命令模式，输入 <code>wq</code>然后回车，保存退出就OK了。</p><p>可以在看看<a href="https://www.runoob.com/linux/linux-vim.html">Linux vi&#x2F;vim</a>，写的很详细，也有演示。vim是在命令行最常用的代码编辑工具，<strong>这个一定要会</strong>。</p><h3 id="🔸Linux的环境变量"><a href="#🔸Linux的环境变量" class="headerlink" title="🔸Linux的环境变量"></a>🔸Linux的环境变量</h3><p>环境变量是具有特殊名字的一个特定对象，包含了一个或多个应用程序运行所需的信息，例如：</p><blockquote><ul><li><code>PATH</code>可执行程序的搜索路径，当要求系统运行一个程序，而没告诉系统它的具体路径时，系统就要在 <code>PTAH</code>值的路径中寻找此程序，找到去执行</li><li><code>LIBRARY_PATH</code>静态库搜索路经</li><li><code>LD_LIBRARY_PATH</code>动态库搜索路径</li><li><code>HOME</code>指向用户目录的路径</li></ul></blockquote><p>在Linux系统中，环境变量按照其作用范围不同大致可以分为<strong>系统环境变量</strong>和<strong>用户环境变量</strong>。用户环境变量是每一个登录到系统的用户只能够读取到的属于自己的用户级环境变量，只对当前登录用户起作用。而系统环境变量对所有用户都起作用，且普通用户无权修改。</p><p>对于用户来说，环境变量的设置分为两种方式：<strong>临时</strong>和<strong>永久</strong></p><ul><li>临时设置使用 <code>export</code>，例如 <code>export PATH=/home/xyz/Tesseract/bin:$PATH</code>，这里需要注意的是要把原来的 <code>$PATH</code>放在后面，并用 <code>:</code>连接起来，因为系统查找可执行文件，是按照从前往后的顺序查找的，一旦找到就不会继续查找了，所以放在最前面让系统优先找这个目录。查看是否已经设好，可用 <code>export</code>（查看所有设置的环境变量）或者 <code>echo</code>查看，例如 <code>echo $PATH</code>。</li><li>永久生效，修改 <code>~/.bashrc</code>文件，每个用户目录下都有这个文件，对单独用户有效，在文件末尾加入 <code>export PATH=/home/xyz/Tesseract/bin:$PATH</code>，重新登陆即可。</li></ul><p>当用户需要<strong>不同于系统默认的软件版本</strong>或者<strong>想快速执行某个命令</strong>时，就需要自己设置环境变量，比如代码要求不同版本的cuda环境，不同版本的gcc，快速启动位于某个目录下的脚本等等。</p><h3 id="🔸文件下载"><a href="#🔸文件下载" class="headerlink" title="🔸文件下载"></a>🔸文件下载</h3><p>Linux系统中的wget是一个下载文件的工具，它用在命令行下。wget支持HTTP，HTTPS和FTP协议，可以使用HTTP代理。常见的几个用法如下：</p><p>使用wget下载单个文件：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">wget http://www.minjieren.com/wordpress-3.1-zh_CN.zip<br></code></pre></div></td></tr></table></figure><p>指定下载文件名称：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">wget -O wordpress.zip http://www.minjieren.com/download.aspx?<span class="hljs-built_in">id</span>=1080<br></code></pre></div></td></tr></table></figure><p>后台下载：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ wget -b http://www.minjieren.com/wordpress-3.1-zh_CN.zip<br>Continuing <span class="hljs-keyword">in</span> background, pid 1840.<br>Output will be written to <span class="hljs-string">&#x27;wget-log&#x27;</span>.<br></code></pre></div></td></tr></table></figure><p>你可以使用以下命令来查看下载进度:</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">tail</span> -f wget-log<br></code></pre></div></td></tr></table></figure><p>断点续传：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">wget -c http://www.minjieren.com/wordpress-3.1-zh_CN.zip<br></code></pre></div></td></tr></table></figure><h3 id="🔸文件解压"><a href="#🔸文件解压" class="headerlink" title="🔸文件解压"></a>🔸文件解压</h3><p>Linux常用的解压和压缩命令如下：</p><p><strong>.tar</strong></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">tar xvf FileName.tar<br></code></pre></div></td></tr></table></figure><p><strong>.gz</strong></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">gunzip FileName.gz<br>gzip -d FileName.gz<br></code></pre></div></td></tr></table></figure><p><strong>.tar.gz 和 .tgz</strong></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">tar zxvf FileName.tar.gz<br></code></pre></div></td></tr></table></figure><p><strong>.zip</strong></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">unzip FileName.zip<br></code></pre></div></td></tr></table></figure><p><strong>.rar</strong></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">rar x FileName.rar<br></code></pre></div></td></tr></table></figure><h2 id="📝服务器使用规范"><a href="#📝服务器使用规范" class="headerlink" title="📝服务器使用规范"></a>📝服务器使用规范</h2><p>服务器是大家的公有资源，良好的使用习惯可以降低服务器安全风险，减少维护人员的工作负担。</p><h3 id="🔸用户权限"><a href="#🔸用户权限" class="headerlink" title="🔸用户权限"></a>🔸用户权限</h3><p>服务器上每个人都有单独的普通权限账户，无权进行的操作包含但不止于：安装卸载系统软件，修改系统文件，修改系统服务等，如有相关需求请联系管理员，这是为了服务器安全和稳定运行考虑的，请理解。</p><h3 id="🔸用户密码"><a href="#🔸用户密码" class="headerlink" title="🔸用户密码"></a>🔸用户密码</h3><p>请勿设置过于简单的密码，比如连续数字，以防服务器被攻击，占用显卡资源，可使用 <code>passwd</code>命令更改自己密码。<strong>任何用户在登录时连续错误输入密码三次，IP会被加入服务器黑名单10mins。</strong></p><h3 id="🔸数据存放"><a href="#🔸数据存放" class="headerlink" title="🔸数据存放"></a>🔸数据存放</h3><p>基本每一个服务器都有一个或多个单独的数据硬盘，用于存放用户数据集和用户大文件，一般在 <code>/mnt</code>目录下挂载，所以较大的数据（如数据集和权重文件）请放在此路径下，不要随意存放在自己 <code>home</code>目录下，不然挂载 <code>home</code>目录的硬盘会随着时间推移，可用空间逐渐减少，影响其他用户使用和系统稳定。</p><p>以E1为例：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ <span class="hljs-built_in">df</span> -h<br>/dev/nvme0n1p2  916G   38G  832G   5% /<br>/dev/sda1       1.8T  1.3T  410G  77% /home<br>/dev/sdb1       3.6T  541G  2.9T  16% /mnt/sdb<br></code></pre></div></td></tr></table></figure><p>1T的固态硬盘挂载在根目录用于系统，2T的机械硬盘挂载在 <code>home</code>目录，用于存放系统用户数据，另外还有4T的机械硬盘挂载在 <code>/mnt/sdb</code>，用于存放自定义用户数据。</p><p>在其下，用户拥有一个拥有者是自身的文件夹（由管理员创建），用户可自行读写。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ <span class="hljs-built_in">ls</span> -all<br>total 28K<br>drwxr-xr-x 3 hz   hz   4.0K 7月   6 20:26 hz<br>drwx------ 2 root root  16K 6月  30 17:26 lost+found<br>drwxr-xr-x 3 xyl  xyl  4.0K 7月   6 22:03 xyl<br>drwxr-xr-x 8 zx   zx   4.0K 8月  15 10:21 zx<br></code></pre></div></td></tr></table></figure><p><strong>用户可以通过创建软链接的方式（类似于Windows的快捷方式），将此处的文件夹链接到指定目录。</strong></p><p>Linux ln（英文全拼：link files）命令是一个非常重要命令，它的功能是为某一个文件在另外一个位置建立一个同步的链接。当我们需要在不同的目录，用到相同的文件时，我们不需要在每一个需要的目录下都放一个必须相同的文件，我们只要在某个固定的目录，放上该文件，然后在其它的目录下用ln命令链接（link）它就可以，不必重复的占用磁盘空间。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">ln</span> -s [源文件或目录][目标文件或目录]<br></code></pre></div></td></tr></table></figure><p>创建软链接：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">ln</span> -s /mnt/sdb/zx/coco /home/zx/project/data/coco<br></code></pre></div></td></tr></table></figure><p>删除软链接：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> /home/zx/project/data/coco<br></code></pre></div></td></tr></table></figure><p>Note: <code>ls</code>命令查看目录列表时，目录，文件和软链接的颜色是不同的，可以加上 <code>-all</code>参数查看软链接的目标路径。</p><p>Note: 账号申请，注销，密码重置等问题请联系张宇浩或者张熙。</p><h2 id="☢️深度学习环境"><a href="#☢️深度学习环境" class="headerlink" title="☢️深度学习环境"></a>☢️深度学习环境</h2><h3 id="🔸Anaconda"><a href="#🔸Anaconda" class="headerlink" title="🔸Anaconda"></a>🔸Anaconda</h3><p>因为服务器都是大家共用的，每个人所需要的python环境各不相同，环境中的包也不相同，所以在服务器上都会使用anaconda创建不同的python环境。为了节省服务器空间，<strong>B，D，F1，E1和E2的anaconda均安装在公共目录下，用户不需要再单独安装</strong>，其他服务器上若使用anaconda则需要<strong>自行安装</strong>。</p><p>在<strong>初次使用anconda</strong>时，应执行 <code>conda init</code>来初始化anaconda的用户环境变量。（如果shell使用的zsh，请执行 <code>conda init zsh</code>）</p><p><strong>自行安装Anaconda</strong><br>使用wget从网站下载Linux版的anaconda安装包，如 Anaconda3-2021.05-Linux-x86_64.sh（来自 <a href="https://www.anaconda.com/products/individual%EF%BC%89">https://www.anaconda.com/products/individual）</a><br>执行 <code>sh Anaconda3-2021.05-Linux-x86_64.sh</code><br>默认安装目录为 <code>/home/&lt;user&gt;/anaconda&lt;2 or 3&gt;</code></p><p><code>Do you wish the installer to initialize Anaconda3 by running conda init?</code> 输入 <code>yes</code><br>初始化shell环境变量（默认shell为bash的用户请输入yes）</p><p>Note: 默认shell不是bash的用户请输入 <code>no</code>，然后输入 <code>source &lt;path to conda&gt;/bin/activate</code>，执行 <code>conda init &lt;shell-name&gt;</code>，如 <code>conda init zsh</code>，进行其他shell的环境变量初始化。如果不想在登入系统时进入base环境，请执行 <code>conda config --set auto_activate_base False</code></p><p>在anaconda中，使用conda同时进行<strong>包的管理</strong>（和python的pip包管理器类似）和<strong>虚拟环境</strong>的管理，值得注意的是，在虚拟环境中<strong>仍然可以使用pip</strong>进行包的管理。</p><p>conda 和 pip 的命令参考和对比：</p><table><thead><tr><th align="left">任务</th><th align="left">conda 命令</th><th align="left">pip 命令</th></tr></thead><tbody><tr><td align="left">创建环境</td><td align="left"><code>conda create --name $ENVIRONMENT_NAME python=3.7</code></td><td align="left">——</td></tr><tr><td align="left">激活环境</td><td align="left"><code>conda activate $ENVIRONMENT_NAME</code></td><td align="left">——</td></tr><tr><td align="left">退出环境</td><td align="left"><code>conda deactivate</code></td><td align="left">——</td></tr><tr><td align="left">删除环境</td><td align="left"><code>conda remove --name $ENVIRONMENT_NAME --all</code></td><td align="left">——</td></tr><tr><td align="left">查看已创建的虚拟环境</td><td align="left"><code>conda env list</code></td><td align="left">——</td></tr><tr><td align="left">安装包</td><td align="left"><code>conda install $PACKAGE_NAME</code></td><td align="left"><code>pip install $PACKAGE_NAME</code></td></tr><tr><td align="left">卸载包</td><td align="left"><code>conda uninstall $PACKAGE_NAME</code></td><td align="left"><code>pip uninstall $PACKAGE_NAME</code></td></tr><tr><td align="left">查看已安装包</td><td align="left"><code>conda list</code></td><td align="left"><code>pip list</code></td></tr><tr><td align="left">搜索可用包</td><td align="left"><code>conda search $SEARCH_TERM</code></td><td align="left"><code>pip search $SEARCH_TERM</code></td></tr></tbody></table><p>为了加速conda和pip的下载速度，建议使用国内开源镜像，设置方法如下：</p><p><strong>conda</strong></p><p>修改用户目录下的 <code>.condarc</code> 文件为：</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">channels:<br>  - defaults<br>show_channel_urls: true<br>default_channels:<br>  - https:<span class="hljs-regexp">//mi</span>rrors.bfsu.edu.cn<span class="hljs-regexp">/anaconda/</span>pkgs/main<br>  - https:<span class="hljs-regexp">//mi</span>rrors.bfsu.edu.cn<span class="hljs-regexp">/anaconda/</span>pkgs/r<br>  - https:<span class="hljs-regexp">//mi</span>rrors.bfsu.edu.cn<span class="hljs-regexp">/anaconda/</span>pkgs/msys2<br>custom_channels:<br>  conda-forge: https:<span class="hljs-regexp">//mi</span>rrors.bfsu.edu.cn<span class="hljs-regexp">/anaconda/</span>cloud<br>  msys2: https:<span class="hljs-regexp">//mi</span>rrors.bfsu.edu.cn<span class="hljs-regexp">/anaconda/</span>cloud<br>  bioconda: https:<span class="hljs-regexp">//mi</span>rrors.bfsu.edu.cn<span class="hljs-regexp">/anaconda/</span>cloud<br>  menpo: https:<span class="hljs-regexp">//mi</span>rrors.bfsu.edu.cn<span class="hljs-regexp">/anaconda/</span>cloud<br>  pytorch: https:<span class="hljs-regexp">//mi</span>rrors.bfsu.edu.cn<span class="hljs-regexp">/anaconda/</span>cloud<br>  simpleitk: https:<span class="hljs-regexp">//mi</span>rrors.bfsu.edu.cn<span class="hljs-regexp">/anaconda/</span>cloud<br></code></pre></div></td></tr></table></figure><p>即可添加 Anaconda Python 免费仓库。运行 <code>conda clean -i</code> 清除索引缓存，保证用的是镜像站提供的索引。</p><p>用户目录下的 <code>.condarc</code> 可能不存在，可使用vim或者touch命令创建。</p><p><strong>pip</strong></p><p>进入虚拟环境 <code>pip config set global.index-url https://mirrors.bfsu.edu.cn/pypi/web/simple</code> 即可。</p><p>完整的开源镜像站文档参考<a href="https://mirrors.bfsu.edu.cn/">北京外国语大学开源软件镜像站 | BFSU Open Source Mirror</a>。</p><h3 id="🔸PyTorch的安装"><a href="#🔸PyTorch的安装" class="headerlink" title="🔸PyTorch的安装"></a>🔸PyTorch的安装</h3><p>借助GPU的深度学习环境基本都由nvidia驱动，cuda工具包，cudnn工具包，深度学习框架（PyTorch，TensorFlow等）几部分组成，四个部分环环相扣。nvidia驱动，cuda，cudnn都是安装在系统中的，所有人共用。而深度学习框架是用户使用的，安装在自己的虚拟环境中。</p><p>根据服务器使用的显卡型号，每台服务器都预置了兼容了nvidia驱动，cuda和cudnn，不同cuda版本所需的深度学习框架版本是不同的，安装时要确定自己所使用的cuda版本。</p><p>通过查看&#x2F;usr&#x2F;local目录：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ <span class="hljs-built_in">ls</span> /usr/local -all<br>total 44K<br>drwxr-xr-x  2 root root 4.0K 6月  24 22:36 bin<br>lrwxrwxrwx  1 root root   21 6月  23 14:38 cuda -&gt; /usr/local/cuda-11.1/<br>drwxr-xr-x 15 root root 4.0K 8月  16 21:58 cuda-10.1<br>drwxr-xr-x 14 root root 4.0K 6月  23 14:39 cuda-11.1<br>drwxr-xr-x 18 root root 4.0K 8月  16 15:20 cuda-9.0<br></code></pre></div></td></tr></table></figure><p>或者通过查看nvcc编译器版本：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ nvcc -V<br>nvcc: NVIDIA (R) Cuda compiler driver<br>Copyright (c) 2005-2020 NVIDIA Corporation<br>Built on Mon_Oct_12_20:09:46_PDT_2020<br>Cuda compilation tools, release 11.1, V11.1.105<br>Build cuda_11.1.TC455_06.29190527_0<br></code></pre></div></td></tr></table></figure><p>Warning: 有些服务器可能安装了多个cuda版本，&#x2F;usr&#x2F;local&#x2F;cuda所指向的为系统默认cuda。</p><p>在确定了cuda版本之后，就可以在虚拟环境中安装对应的深度学习框架了，以pytorch为例，提供使用conda和pip（wheel）两种方式的安装方法：</p><p><strong>CUDA11.1 PyTorch1.8</strong></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">conda install pytorch==1.8.0 torchvision==0.9.0 torchaudio==0.8.0 cudatoolkit=11.1 -c pytorch -c conda-forge<br></code></pre></div></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">pip install torch==1.8.1+cu111 torchvision==0.9.1+cu111 -f https://download.pytorch.org/whl/torch_stable.html<br></code></pre></div></td></tr></table></figure><p><strong>请根据cuda版本选择pytorch进行安装，不同版本的命令列表详见</strong><a href="https://pytorch.org/get-started/previous-versions/">Previous PyTorch Versions | PyTorch</a>。</p><p>支持情况汇总如下：</p><table><thead><tr><th>CUDA版本</th><th align="center">pytorch 1.8.0</th><th align="center">pytorch 1.7.1</th><th align="center">pytorch 1.7.0</th><th align="center">pytorch 1.6.0</th><th align="center">pytorch 1.5.0</th><th align="center">pytorch 1.4.0</th><th align="center">pytorch 1.2.0</th><th align="center">pytorch 1.1.0</th><th align="center">pytorch 1.0.0</th></tr></thead><tbody><tr><td>CUDA 11.1</td><td align="center"><strong>√</strong></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td>CUDA 11.0</td><td align="center"></td><td align="center"><strong>√</strong></td><td align="center"><strong>√</strong></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td>CUDA 10.2</td><td align="center"><strong>√</strong></td><td align="center"><strong>√</strong></td><td align="center"><strong>√</strong></td><td align="center"><strong>√</strong></td><td align="center"><strong>√</strong></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td>CUDA 10.1</td><td align="center"></td><td align="center"><strong>√</strong></td><td align="center"><strong>√</strong></td><td align="center"><strong>√</strong></td><td align="center"><strong>√</strong></td><td align="center"><strong>√</strong></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td>CUDA 10.0</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"><strong>√</strong></td><td align="center"><strong>√</strong></td><td align="center"><strong>√</strong></td></tr><tr><td>CUDA 9.2</td><td align="center"></td><td align="center"><strong>√</strong></td><td align="center"><strong>√</strong></td><td align="center"><strong>√</strong></td><td align="center"><strong>√</strong></td><td align="center"><strong>√</strong></td><td align="center"><strong>√</strong></td><td align="center"></td><td align="center"></td></tr><tr><td>CUDA 9.0</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"><strong>√</strong></td><td align="center"><strong>√</strong></td></tr></tbody></table><p>Warning: 以上并未列出所有版本，不建议使用pytorch&lt;1.0的版本，**E1，E2和F1显卡为3090，必须使用 CUDA 11.1+ pytorch 1.8+**，其他版本均不支持，如有比较老旧的项目可能需要修改才能运行。（E1上的torch 1.7.1的环境是从源码编译安装的，请勿改动。）</p><h3 id="🔸GPU的状态"><a href="#🔸GPU的状态" class="headerlink" title="🔸GPU的状态"></a>🔸GPU的状态</h3><p>可以使用 <code>nvidia-smi</code>或者 <code>gpustat</code>查看当前GPU的状态</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ nvidia-smi<br></code></pre></div></td></tr></table></figure><figure class="highlight gherkin"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gherkin">Wed Aug 18 14:42:21 2021<br>+-----------------------------------------------------------------------------+<br>|<span class="hljs-string"> NVIDIA-SMI 470.57.02    Driver Version: 470.57.02    CUDA Version: 11.4     </span>|<br>|<span class="hljs-string">-------------------------------+----------------------+----------------------+</span><br><span class="hljs-string"></span>|<span class="hljs-string"> GPU  Name        Persistence-M</span>|<span class="hljs-string"> Bus-Id        Disp.A </span>|<span class="hljs-string"> Volatile Uncorr. ECC </span>|<br>|<span class="hljs-string"> Fan  Temp  Perf  Pwr:Usage/Cap</span>|<span class="hljs-string">         Memory-Usage </span>|<span class="hljs-string"> GPU-Util  Compute M. </span>|<br>|<span class="hljs-string">                               </span>|<span class="hljs-string">                      </span>|<span class="hljs-string">               MIG M. </span>|<br>|<span class="hljs-string">===============================+======================+======================</span>|<br>|<span class="hljs-string">   0  NVIDIA GeForce ...  Off  </span>|<span class="hljs-string"> 00000000:2D:00.0 Off </span>|<span class="hljs-string">                  N/A </span>|<br>|<span class="hljs-string"> 43%   52C    P0   120W / 390W </span>|<span class="hljs-string">      0MiB / 24268MiB </span>|<span class="hljs-string">      0%      Default </span>|<br>|<span class="hljs-string">                               </span>|<span class="hljs-string">                      </span>|<span class="hljs-string">                  N/A </span>|<br>+-------------------------------+----------------------+----------------------+<br>|<span class="hljs-string">   1  NVIDIA GeForce ...  Off  </span>|<span class="hljs-string"> 00000000:2E:00.0 Off </span>|<span class="hljs-string">                  N/A </span>|<br>|<span class="hljs-string"> 86%   66C    P2   345W / 350W </span>|<span class="hljs-string">  22539MiB / 24268MiB </span>|<span class="hljs-string">     99%      Default </span>|<br>|<span class="hljs-string">                               </span>|<span class="hljs-string">                      </span>|<span class="hljs-string">                  N/A </span>|<br>+-------------------------------+----------------------+----------------------+<br><br>+-----------------------------------------------------------------------------+<br>|<span class="hljs-string"> Processes:                                                                  </span>|<br>|<span class="hljs-string">  GPU   GI   CI        PID   Type   Process name                  GPU Memory </span>|<br>|<span class="hljs-string">        ID   ID                                                   Usage      </span>|<br>|<span class="hljs-string">=============================================================================</span>|<br>|<span class="hljs-string">    1   N/A  N/A      8793      C   ...nvs/open-mmlab/bin/python    22537MiB </span>|<br>+-----------------------------------------------------------------------------+<br></code></pre></div></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ gpustat<br></code></pre></div></td></tr></table></figure><figure class="highlight tap"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tap">ServerE1                    Wed Aug<span class="hljs-number"> 18 </span>14:45:01<span class="hljs-number"> 2021 </span> 470.57.02<br>[0] NVIDIA GeForce RTX<span class="hljs-number"> 3090 </span>| 51&#x27;C,  <span class="hljs-number"> 0 </span>% |    <span class="hljs-number"> 0 </span>/<span class="hljs-number"> 24268 </span>MB |<br>[1] NVIDIA GeForce RTX<span class="hljs-number"> 3090 </span>| 66&#x27;C, <span class="hljs-number"> 93 </span>% |<span class="hljs-number"> 22539 </span>/<span class="hljs-number"> 24268 </span>MB | fsr(22537M)<br></code></pre></div></td></tr></table></figure><p>若要连续查看可使用 <code>watch</code>命令，如 <code>watch -n 1 nvidia-smi</code> 每1s输出刷新一次，<code>Ctrl+C</code>退出。</p><p>若要指定运行的GPU，可以通过<strong>设置环境变量</strong>的方式：</p><p>在程序一开始设置：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br>os.environ[<span class="hljs-string">&quot;CUDA_DEVICE_ORDER&quot;</span>] = <span class="hljs-string">&quot;PCI_BUS_ID&quot;</span><br>os.environ[<span class="hljs-string">&#x27;CUDA_VISIBLE_DEVICES&#x27;</span>] = <span class="hljs-string">&quot;0,1&quot;</span> <span class="hljs-comment">#单卡os.environ[&#x27;CUDA_VISIBLE_DEVICES&#x27;] = &quot;0&quot;</span><br></code></pre></div></td></tr></table></figure><p>或者在运行代码前执行：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> CUDA_DEVICE_ORDER=PCI_BUS_ID<br><span class="hljs-built_in">export</span> CUDA_VISIBLE_DEVICES=0,1<br></code></pre></div></td></tr></table></figure><p>Note: 环境变量 <code>CUDA_DEVICE_ORDER</code>指明了显卡的排列顺序，如果不指定为 <code>PCI_BUS_ID</code>，实际使用的显卡编号可能与 <code>nvidia-smi</code>命令中的编号不一致。</p><p>Note: pytorch代码中的 <code>cuda:id</code>其中的 <code>id</code>是环境变量 <code>CUDA_VISIBLE_DEVICES</code>中的顺序编号，与物理显卡设备顺序无关。如CUDA_VISIBLE_DEVICES&#x3D;1，那么 <code>cuda:0</code>即指1号显卡。</p><h2 id="🛩️文件传输"><a href="#🛩️文件传输" class="headerlink" title="🛩️文件传输"></a>🛩️文件传输</h2><p>除了可以在使用MobaXterm登录服务器的同时，在左侧进行文件的拖动传输之外，也有一些专门的工具进行文件传输。</p><h3 id="🔸WinSCP"><a href="#🔸WinSCP" class="headerlink" title="🔸WinSCP"></a>🔸WinSCP</h3><blockquote><p>WinSCP is an open source free <strong>SFTP client</strong>, FTP client, WebDAV client, S3 client and <strong>SCP client</strong> for <strong>Windows</strong>. Its main function is file transfer between a local and a remote computer.</p></blockquote><p>WinSCP只能用在Windows上用于与服务器进行文件传输，可以使用sftp和scp两种安全协议。使用时，我们只需要将用于ssh登录的 <code>host</code>，<code>user</code>，<code>port</code>填入即可，sftp，scp和ssh连接的端口都是一致的。<a href="https://winscp.net/eng/download.php">下载页面</a></p><p><img src="/image/base/1629302722756.png" alt="img"></p><h3 id="🔸Filezilla"><a href="#🔸Filezilla" class="headerlink" title="🔸Filezilla"></a>🔸Filezilla</h3><blockquote><p>The FileZilla Client not only supports FTP, but also FTP over TLS (FTPS) and SFTP.</p></blockquote><p>Filezilla是一款支持SFTP的跨平台文件传输工具，它不仅可以在Windows上使用，也可以在Linux上使用，这样就可以在服务器之间传输文件。<a href="https://filezilla-project.org/download.php?type=client">下载页面</a></p><p><strong>在Windows上使用：</strong></p><p><img src="/image/base/1629304117080.png"></p><p>协议选择SFTP，同样主机名，端口号，用户密码均与ssh登录的相同。</p><p><strong>在服务器上使用：</strong></p><p>打开mobaxterm连接服务器，在命令行输入 <code>filezilla</code>， 随后filezilla的X11窗口就会打开</p><p><img src="/image/base/1629305656435.png"></p><p>点击左上角站点管理器</p><p><img src="/image/base/1629305733103.png"></p><p>在Protocal处滚动滚轮选择SFTP协议，Logon Type同样的方式选择Normal。分别输入另一台服务器的 <code>host</code>，<code>user</code>，<code>port</code>和密码，连接即可直接在服务器之间传输文件。</p><p>Filezilla在传输文件时，最大同时传输的文件数为2，如果用来传输大量小文件大量图片，可将该值设置为10（最大值为10）🚀</p><p><img src="/image/index/1646841810782.png" alt="1646841810782.png"></p><p>Warning: WinSCP和Filezilla在连接服务器之后，并不会在使用过程中自动刷新远程目录，请手动进行刷新。</p><h3 id="🔸FTP服务器"><a href="#🔸FTP服务器" class="headerlink" title="🔸FTP服务器"></a>🔸FTP服务器</h3><p>除了上述两种传输策略外，在<strong>校园网内</strong>还有一个共用的FTP文件服务器🗂️，可提供公共数据集下载，文件中转，<strong>常用软件下载</strong>（texlive，Adobe，MobaXterm，Anaconda，PyTorch等，公共安装包在 <code>public/software</code>目录下）的功能。服务器地址为 <code>ftp.laocheng.tech</code>，端口均为默认的21端口。</p><p><strong>在Windows上使用：</strong></p><p><img src="/image/base/1629612678857.png"></p><p>选择添加网络位置，填入服务器地址，选择匿名登录即可。</p><p><img src="/image/base/1629612805298.png"></p><p><strong>在Linux服务器上使用：</strong></p><p>在服务器上的命令行使用时，要借助lftp工具，它是一个交互式的ftp文件传输工具。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ lftp ftp.laocheng.tech<br>lftp ftp1.laocheng.tech:~&gt; <span class="hljs-built_in">ls</span><br>drwxr-xr-x 1 ftp ftp              0 May 11  2021 Bert pretrained<br>drwxr-xr-x 1 ftp ftp              0 Aug 12 12:14 caption_datasets<br>drwxr-xr-x 1 ftp ftp              0 Jan 24  2021 CelebA<br>drwxr-xr-x 1 ftp ftp              0 Jan 24  2021 cifar10<br>drwxr-xr-x 1 ftp ftp              0 Jan 24  2021 Cityscapes<br>drwxr-xr-x 1 ftp ftp              0 Jan 24  2021 coco_yolo_labels<br>drwxr-xr-x 1 ftp ftp              0 Jul 15  2021 COVERAGE<br>drwxr-xr-x 1 ftp ftp              0 May 21  2021 DAVIS<br>drwxr-xr-x 1 ftp ftp              0 Jan 26  2021 DIV2K<br>drwxr-xr-x 1 ftp ftp              0 Jan 24  2021 DOTA<br>drwxr-xr-x 1 ftp ftp              0 Mar 29  2021 DUT-OMRON<br>drwxr-xr-x 1 ftp ftp              0 Mar 27  2021 ECSSD<br>drwxr-xr-x 1 ftp ftp              0 Aug 12 16:35 Flickr30k<br>drwxr-xr-x 1 ftp ftp              0 Mar 27  2021 FSS-1000<br>drwxr-xr-x 1 ftp ftp              0 May 21  2021 FVI<br>drwxr-xr-x 1 ftp ftp              0 Mar 18  2021 HashDataset<br>drwxr-xr-x 1 ftp ftp              0 Jan 24  2021 HRSC2016<br></code></pre></div></td></tr></table></figure><p>常用命令如下：</p><p>连接服务器：<code>lftp ftp.laocheng.tech</code></p><p>列出服务器目录：<code>ls</code></p><p>切换服务器目录：<code>cd</code></p><p>列出本地目录：<code>!ls</code></p><p>切换本地目录：<code>lcd</code></p><p>上传文件：<code>put xxx</code></p><p>上传多个文件：<code>mput xxx xxx</code></p><p>下载文件：<code>get xxx</code></p><p>下载多个文件：<code>mget xxx xxx</code></p><p>多线程下载：<code>pget xxx</code></p><p>下载目录：<code>mirror xxx</code></p><p>上传目录：<code>mirror -R xxx</code></p><p>文件操作支持通配符 <code>*</code></p><p>退出lftp交互命令行：<code>Ctrl+D</code></p><p>Warning: ftp文件服务器上的根目录和数据集目录权限均为只读，<code>/public</code>目录为公有目录可读可写。</p><h2 id="🕐后台运行"><a href="#🕐后台运行" class="headerlink" title="🕐后台运行"></a>🕐后台运行</h2><p>与使用桌面不同，我们在ssh终端中运行的命令，都会随着ssh连接的断开而终止，而深度学习的训练一般都是非常耗时的，在训练过程中，ssh连接可能会因为网络不稳定等因素而断开，所以需要一种会话的机制，让我们能够在会话中运行一些指令，在会话断开后，命令不会停止。screen和tmux就提供了这种功能，两者用法类似，可依据自身喜好选择。这里就以screen为例介绍，tmux的使用可以参考：<a href="http://louiszhai.github.io/2017/09/30/tmux/">Tmux使用手册</a></p><p>创建会话：<code>screen -S test</code></p><p>从会话中detach（不会影响代码运行）：<code>Ctrl+A, Ctrl+D</code></p><p>列出当前所有会话：<code>screen -ls</code></p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">There</span> is a screen <span class="hljs-literal">on</span>:<br><span class="hljs-attribute">29978</span>.test      (<span class="hljs-number">2021</span>年<span class="hljs-number">08</span>月<span class="hljs-number">22</span>日 <span class="hljs-number">15</span>时<span class="hljs-number">15</span>分<span class="hljs-number">08</span>秒)   (Detached)<br><span class="hljs-attribute">1</span> Socket in /run/screen/S-zx.<br></code></pre></div></td></tr></table></figure><p>重新连接会话：<code>screen -r test</code> 或者 <code> screen -r 29978</code></p><p>在会话内，结束会话：<code>Ctrl+D</code></p><p>在会话外，结束会话：<code>screen -X -S test quit</code></p><p>手动断开已连接的会话（某些情况下的非正常断开，会导致会话状态为attached，而无法恢复连接，需要手动detach）：<code>screen -d test </code>或者 <code> screen -d 29978</code></p><p>在进入screen模式下之后，无法在终端使用鼠标滚轮、PgUp和PgDn进行滚动和翻页，要先按 <code>Ctrl+A</code>键，然后释放，再按 <code>[</code>键即可进入复制模式，此时可进行正常的滚动和翻页，退出复制模式 <code>Ctrl+C</code>。</p><h2 id="🎢远程调试"><a href="#🎢远程调试" class="headerlink" title="🎢远程调试"></a>🎢远程调试</h2><p>仅仅依靠ssh连接的命令行来进行代码的编写和调试是远远不能满足需求的，我们可以在本地搭建开发环境（PyCharm，VSCode等），将修改的代码同步到服务器运行。</p><h3 id="🔸VSCode-with-SFTP"><a href="#🔸VSCode-with-SFTP" class="headerlink" title="🔸VSCode with SFTP"></a>🔸VSCode with SFTP</h3><p>VSCode作为一个轻量化代码编辑器，在本地调试Python代码时，需要安装Python（内置Pylance）这个扩展包才能进行Python代码的调试和运行。Pylance提供了VSCode中Python代码的自动补全，代码索引等功能。SFTP是一种文件传输协议，VSCode的相关扩展可以自动帮助我们同步修改的文件。</p><p><img src="/image/index/1635064452317.png"></p><p>首先在扩展中搜索SFTP，并安装（注意安装的版本来源，liximono的版本原作者已经不再维护了，而且目前处于不可用状态。）</p><p><img src="/image/index/1635064601974.png"></p><p>安装完成之后，Ctrl+Shift+P 打开VSCode的命令界面，选中 <code>SFTP: Config</code></p><p><img src="/image/index/1635064717594.png"></p><p>之后，扩展会自动在打开的项目文件夹目录下创建.vscode文件夹和sftp.json的配置文件。我们需要指定所连接服务器的 <code>host</code>、<code>port</code>和 <code>remotePath</code>以建立sftp文件传输连接并同步文件。</p><p><img src="/image/index/1635065196303.png"></p><p>如果不想每次同步文件时都输入密码，可以添加windows的ssh私钥文件路径到配置文件中（<code>privateKeyPath</code>），密钥生成方法参考文档之后的内容。</p><p><img src="/image/index/1635065269478.png"></p><p>随后就可以在侧边栏列出服务器 <code>remotePath</code>中的文件列表，当编辑本地的文件并保存时，会自动将文件同步到服务器并在左下方显示文件上传状态。</p><p><img src="/image/index/1635065427849.png"></p><p>在资源管理器右键文件夹或者文件时，还可以手动选择同步选项。</p><p>这种在本地编辑代码然后同步到服务器上的方式，只能在连接服务器的终端中执行命令，不能在本地调试和运行。所以通过以下两种方式，我们还可以<strong>直接修改和调试远程服务器上的代码。</strong></p><h3 id="🔸VSCode-with-Remote-SSH"><a href="#🔸VSCode-with-Remote-SSH" class="headerlink" title="🔸VSCode with Remote-SSH"></a>🔸VSCode with Remote-SSH</h3><p>本地的VSCode可以直接连接远程服务器进行远程调试，体验要比x11 forwarding要好很多。</p><p><img src="/image/base/1629792502968.png" alt="img"></p><p>图为VSCode的远程调试的设计框架，下面是具体的使用步骤：</p><p><img src="/image/base/1629793075334.png"></p><p>安装Remote-SSH扩展包。</p><p><img src="/image/base/1629793219934.png"></p><p>点击左下角图标，新建连接。</p><p><img src="/image/base/1629793338364.png"></p><p><img src="/image/base/1629793375559.png" alt="img"></p><p>按照 <code>ssh user@host -p port -A</code>的格式输入要连接的远程主机。</p><p><img src="/image/base/1629793396818.png"></p><p>保存连接配置到用户ssh文件夹的config文件中。</p><p><img src="/image/base/1629793416181.png"></p><p>选择目标主机（即服务器）的操作系统平台，Linux。</p><p><img src="/image/base/1629793466207.png"></p><p>输入用户密码（<strong>后续操作可能会多次要求输入密码，使用密钥登录可以避免重复输入密码</strong>），等待VSCode的服务端安装完毕。</p><p><img src="/image/base/1629793483805.png"></p><p>在连接成功之后，左下角会变为已连接的主机名称，在左侧资源管理器可以选择要打开的远程文件夹。</p><p><img src="/image/base/1630324614891.png"></p><p><img src="/image/base/1630324912739.png"></p><p>选择要打开的文件夹，并点击确定，在左侧可以进行文件的上传和下载。（右键进行文件的下载，上传直接从本地拖入即可）</p><p><img src="/image/base/1630325059143.png"></p><p>和在本机上使用VSCode类似，也要在扩展中为远程VSCode安装所需的扩展包，如python扩展包，提供代码语法检查，代码提示和调试等功能（部分扩展包可能需要重启VSCode才会生效）。</p><p><img src="/image/base/1630324848190.png"></p><p>在安装了Python的扩展包之后，打开文件夹中的Python文件，会自动激活python扩展，然后选择服务器上自己创建的虚拟环境即可。<strong>（最新VSCode的虚拟环境选择在窗口视图的右下角）</strong></p><p><img src="/image/index/1648522268482.png" alt="1648522268482.png"></p><p><img src="/image/base/1630325936207.png"></p><p>可以在标题栏点击终端，即可打开远程服务器的Terminal。</p><p>Warning: 使用远程调试时，服务器上修改的代码不会保存到本地，请定时备份服务器上的文件，以防止文件丢失。</p><h3 id="🔸PyCharm-with-X11-Forwarding"><a href="#🔸PyCharm-with-X11-Forwarding" class="headerlink" title="🔸PyCharm with X11 Forwarding"></a>🔸PyCharm with X11 Forwarding</h3><p>PyCharm不仅有Windows的版本，也有服务器上的版本，借助x11 forwarding，我们可以在本地借助PyCharm调试远程服务器的代码。</p><p>首先打开MobaXterm，下载并解压（<a href="https://www.jetbrains.com/PyCharm/download/#section=linux">Download PyCharm: Python IDE for Professional Developers by JetBrains</a>，选择Linux社区版获取最新版下载链接）：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">wget https://download.jetbrains.com/python/pycharm-community-2021.2.tar.gz<br></code></pre></div></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">tar zxvf pycharm-community-2021.2.tar.gz<br></code></pre></div></td></tr></table></figure><p>运行PyCharm：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> pycharm-community-2021.2/bin<br></code></pre></div></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">./pycharm.sh<br></code></pre></div></td></tr></table></figure><p>等待片刻PyCharm的窗口会在本地打开：</p><p><img src="/image/base/1629633631793.png"></p><p>打开项目文件后，要配置使用的conda环境：</p><p><img src="/image/base/1629634028948.png"></p><p>在使用PyCharm时，MobaXterm不能退出，否则远程服务器的PyCharm本地窗口会随之关闭。</p><p>要想直接通过点击PyCharm的<strong>运行按钮</strong>运行代码，需要添加运行时的必要参数如：</p><p><img src="/image/base/1629636049738.png"></p><h2 id="✨密钥登录"><a href="#✨密钥登录" class="headerlink" title="✨密钥登录"></a>✨密钥登录</h2><p>除了使用用户名和密码登录登录服务器之外，还可以使用密钥登录，只需要将自己的公钥拷贝到服务器上即可，再次登录时便不需要输入密码。</p><p><strong>首先在Windows的cmd或者powershell中生成密钥对（一路回车就行）：</strong></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ssh-keygen<br></code></pre></div></td></tr></table></figure><figure class="highlight gherkin"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gherkin">Generating public/private rsa key pair.<br>Enter file in which to save the key (C:\Users\HAPPY/.ssh/id_rsa):<br>Enter passphrase (empty for no passphrase):<br>Enter same passphrase again:<br>Your identification has been saved in C:\Users\HAPPY/.ssh/id_rsa.<br>Your public key has been saved in C:\Users\HAPPY/.ssh/id_rsa.pub.<br>The key fingerprint is:<br>SHA256:mkz4fLvfdvfd8Ejn8hlv5mjhkpyRWuemhgmhDjB+h4dcfg happy<span class="hljs-meta">@DESKTOP-A49DO1F</span><br>The key&#x27;s randomart image is:<br>+---[RSA 3072]----+<br>|<span class="hljs-string">             /.o.</span>|<br>|<span class="hljs-string">              ..E</span>|<br>|<span class="hljs-string">               ..</span>|<br>|<span class="hljs-string">     . 3   . ...o</span>|<br>|<span class="hljs-string">    . . S   = B+=</span>|<br>|<span class="hljs-string">     = 2     O-%=</span>|<br>|<span class="hljs-string">      * . o./oBBB</span>|<br>|<span class="hljs-string">       . . *+ ++=</span>|<br>|<span class="hljs-string">          . o..+o</span>|<br>+----[SHA256]-----+<br></code></pre></div></td></tr></table></figure><p>Warning: 重复运行此命令会覆盖之前生成的密钥，导致免密登录失效。</p><p><strong>然后将公钥拷贝至服务器端：</strong></p><p>公钥文件储存放在Windows用户文件夹的 <code>.ssh</code>文件夹中， <code>C:/Users/&lt;user name&gt;/.ssh/id_rsa.pub</code>，用记事本打开 <code>id_rsa.pub</code>，复制全部内容到服务器家目录(<code>~</code>)中的  <code>.ssh/authorized_keys </code>文件中，若 <code>authorized_keys </code>文件不存在，可使用 <code>vim </code>或者 <code>touch </code>创建。在 <code>authorized_keys</code>文件中，每个公钥占一行。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ ll<br>total 8.0K<br>-rw-rw-r-- 1 zx zx 810 8月  17 17:15 authorized_keys<br>-rw-r--r-- 1 zx zx 666 8月  17 15:09 known_hosts<br></code></pre></div></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ <span class="hljs-built_in">cat</span> authorized_keys<br>ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDkFUFwpNI8ia9T6dHLHAO+by5aO//ilOjald15Ax9WJ+DfzsX+cXkltYtPLrGfsGz3ayTgPOqvwRrfnZs7rPSnTgJxm5+GSKBT9IA1dgtF3wNKvNGJJxvC0ccE6orytUdueOx2fFWExu47vC3MEIGjMYP0aycU9x0ByeUnHx6ZQCx8lP+D9eYvZB+TTWS2siu0rtjO3jJnr6mMbsstfgrgesgesrgewgegsrgNb62px1DeKgRU3FOSwqenG+bmxMR4LHvtSgWImDix zhangxi@DESKTOP-A5A3VVN<br>ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDhKH3IzVUosRhHmi/CMQotx7yxhrx52ntkguVoCIm/vooA5Oy3ezbUAl3dO7gLYDkMJtVVXDvpCkRks/x7edrEMm6LVjtEamf7Axj38Hnhwokxu5XGhuiilNoOeHU0BX52J2APs2U3YiisN+/Idg2e/ezljLM7kmn2zjB+v7ghG/mo/R/F8r+7h9i6ZBNjmH/2yhR14EWxPhgAuXmUXPFD1/uzRfrQvjeAATFEmyEMj3O3oNnQ9it+3n535gdgewtergdgergreageage5pppBVqNxaXV4H1+jxgypPfC2tdb8OyEvguPhs9RBiv happy@DESKTOP-4O4VA9I<br></code></pre></div></td></tr></table></figure><p>保存文件，重新登录时，就不用再输入密码了。</p><p>Warning: 修改用户密码不影响使用密钥登录服务器，若有人破解了服务器之后植入了自己的公钥，那需要通过删除 <code>authorized_keys</code>文件来防止其再次登录。</p><h2 id="📈训练可视化"><a href="#📈训练可视化" class="headerlink" title="📈训练可视化"></a>📈训练可视化</h2><p>对于训练周期较长的代码，了解训练过程的各种指标（损失，评价指标，图形等等）是很重要的。TensorBoard是最常用的训练可视化工具，目前已经集成在PyTorch中，VisualDL是百度PaddlePaddle的可视化工具。两者都是独立的Python包，不依赖于特定的深度学习框架，且用法类似。本章节只介绍最基本的使用，更多内容请分别参考以下文档：<a href="https://pytorch.org/docs/stable/tensorboard.html?highlight=tensorboard">torch.utils.tensorboard — PyTorch 1.9.0 documentation</a>和<a href="https://www.paddlepaddle.org.cn/documentation/docs/zh/1.5/user_guides/howto/evaluation_and_debugging/debug/visualdl.html">VisualDL 工具简介-使用文档-PaddlePaddle深度学习平台</a>，TensorBoard的示例较少，国内文档不多，而VisualDL为百度开发，文档示例齐全，推荐使用VisualDL，两者用法几乎相同。</p><h3 id="🔸基本使用"><a href="#🔸基本使用" class="headerlink" title="🔸基本使用"></a>🔸基本使用</h3><p>所有的可视化工具几乎都是使用Python实现的一个Web服务器，通过命令启动之后，就可以在浏览器看到Web服务器中展示的可视化内容。以VisualDL为例:</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ visualdl --logdir ./log --port 8080<br>VisualDL 2.2.0<br>Running VisualDL at http://localhost:8080/ (Press CTRL+C to quit)<br>Serving VisualDL on localhost; to expose to the network, use a proxy or pass --host 0.0.0.0<br></code></pre></div></td></tr></table></figure><p>然后打开MobaXterm，借助X11 Forwarding打开服务器上的火狐浏览器：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">firefox http://localhost:8080<br></code></pre></div></td></tr></table></figure><h3 id="🔸ssh隧道"><a href="#🔸ssh隧道" class="headerlink" title="🔸ssh隧道"></a>🔸ssh隧道</h3><p>除了使用X11打开服务器上的浏览器之外，还可以借助ssh连接建立ssh隧道的端口转发，将远程服务器的某个端口映射到本地来，MobaXterm提供了这个功能的可视化设置：</p><p><img src="/image/base/1630681404972.png"></p><p><img src="/image/base/1630681614492.png"></p><p><img src="/image/base/1630681749725.png"></p><p>此时在在自己的浏览器打开<strong><a href="http://localhost:10000/">http://localhost:10000</a></strong>，就能访问服务器上的可视化网页。</p><p>Note: 本地的端口应该是空闲的，才能正常使用。设置中<strong>要绑定的本地端口</strong>，<strong>ssh登录所用端口</strong>和<strong>远程服务器上的服务端口</strong>三者没有必然联系。</p><p>在VSCode的远程调试中也提供了通过ssh隧道端口转发的功能，另外在ssh登录时也可以添加相关参数实现端口转发，他们的原理都是相同的，这里不再详细说明。</p><h3 id="🔸端口转发"><a href="#🔸端口转发" class="headerlink" title="🔸端口转发"></a>🔸端口转发</h3><p>除了通过以上两种方式打开训练可视化的页面外，服务器所连接的路由器上还做了部分端口的转发，这样可以直接通过访问IP和端口号打开远程服务器上的特定端口上的Web服务。例如E1的10001-11000范围内的端口，均转发到了校园网内，要访问这些端口的Web服务，只需要使用连接E1时所用的主机名加上特定端口号即可。</p><p>此时在运行可视化工具时，需要修改端口号到指定范围内，并指定 <code>host</code>为 <code>0.0.0.0</code>， 如：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ visualdl --logdir ./log --port 10234 --host 0.0.0.0<br>VisualDL 2.2.0<br>Running VisualDL at http://0.0.0.0:10234/ (Press CTRL+C to quit)<br></code></pre></div></td></tr></table></figure><p>这样在校园网内任意浏览器打开<strong><a href="http://804.laocheng.tech:10234/">http://804.laocheng.tech:10234</a></strong>即可访问服务器上的Web内容了。服务器具体转发的端口范围请查看<a href="https://docs.qq.com/sheet/DSVVVem1QaGVBV2dm">腾讯文档 服务器列表</a>。</p><h2 id="👻科学上网"><a href="#👻科学上网" class="headerlink" title="👻科学上网"></a>👻科学上网</h2><p>有时需要在服务器上使用git clone，或者使用脚本下载github或者谷歌网盘上的内容，然而这些资源在国内的连通性并不稳定。此时可以通过设置服务器上的代理，将连接请求发送到稳定的代理服务器（<code>proxy.laocheng.tech</code>，端口为 <code>23333</code>），进行外网的访问。只需要设置用户的<strong>环境变量</strong>（<code>https_proxy</code>和 <code>http_proxy</code>）即可：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> https_proxy=<span class="hljs-string">&quot;http://proxy.laocheng.tech:23333&quot;</span><br><span class="hljs-built_in">export</span> http_proxy=<span class="hljs-string">&quot;http://proxy.laocheng.tech:23333&quot;</span><br></code></pre></div></td></tr></table></figure><p>环境变量设置后立即生效，可通过 <code>curl -v www.google.com</code>验证：</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">Uses proxy env variable http_proxy == <span class="hljs-string">&#x27;http://proxy1.laocheng.tech:8888&#x27;</span>Trying <span class="hljs-number">10.170</span><span class="hljs-number">.33</span><span class="hljs-number">.135</span>:<span class="hljs-number">8888.</span>..Connected <span class="hljs-keyword">to</span> proxy1.laocheng.tech (<span class="hljs-number">10.170</span><span class="hljs-number">.33</span><span class="hljs-number">.135</span>) port <span class="hljs-number">8888</span> (#<span class="hljs-number">0</span>)<span class="hljs-keyword">GET</span> http://www.google.com/ HTTP/<span class="hljs-number">1.1</span><br>Host: www.google.com<br><span class="hljs-keyword">User</span>-Agent: curl/<span class="hljs-number">7.71</span><span class="hljs-number">.1</span><br>Accept: /<br>Proxy-<span class="hljs-keyword">Connection</span>: Keep-AliveMark bundle <span class="hljs-keyword">as</span> <span class="hljs-keyword">not</span> supporting multiuseHTTP <span class="hljs-number">1.0</span>, assume <span class="hljs-keyword">close</span> <span class="hljs-keyword">after</span> body<br>&lt; HTTP/<span class="hljs-number">1.0</span> <span class="hljs-number">200</span> OK<br>&lt; Via: <span class="hljs-number">1.1</span> tinyproxy (tinyproxy/<span class="hljs-number">1.10</span><span class="hljs-number">.0</span>)<br>&lt; <span class="hljs-keyword">Set</span>-Cookie: <span class="hljs-number">1</span>P_JAR=<span class="hljs-number">2021</span><span class="hljs-number">-09</span><span class="hljs-number">-03</span><span class="hljs-number">-12</span>; expires=Sun, <span class="hljs-number">03</span>-Oct<span class="hljs-number">-2021</span> <span class="hljs-number">12</span>:<span class="hljs-number">52</span>:<span class="hljs-number">44</span> GMT; <span class="hljs-type">path</span>=/; <span class="hljs-keyword">domain</span>=.google.com; Secure<br>&lt; <span class="hljs-keyword">Set</span>-Cookie: NID=<span class="hljs-number">222</span>=HplnHUTlqm77DaC_Dz6t4Aldmv9kKBfqwsXPJws7eYLj8zpznAba71io9qOM3Ryzhn6SW9yTBRN5k5ZWy9ztY8pZNFgx8e7Ef8Um0vgjBbvzIFy76nzDGXPshcqeQlPwXZelIh0nvuiOhdTjo<span class="hljs-number">-46</span>rV3K_iGl6CpzFAnL5I4qxNQ; expires=Sat, <span class="hljs-number">05</span>-Mar<span class="hljs-number">-2022</span> <span class="hljs-number">12</span>:<span class="hljs-number">52</span>:<span class="hljs-number">44</span> GMT; <span class="hljs-type">path</span>=/; <span class="hljs-keyword">domain</span>=.google.com; HttpOnly<br>&lt; <span class="hljs-keyword">Cache</span>-Control: private, max-age=<span class="hljs-number">0</span><br>&lt; X-XSS-Protection: <span class="hljs-number">0</span><br>&lt; <span class="hljs-type">Date</span>: Fri, <span class="hljs-number">03</span> Sep <span class="hljs-number">2021</span> <span class="hljs-number">12</span>:<span class="hljs-number">52</span>:<span class="hljs-number">44</span> GMT<br>&lt; <span class="hljs-keyword">Server</span>: gws<br>&lt; Accept-Ranges: <span class="hljs-keyword">none</span><br>&lt; Content-<span class="hljs-keyword">Type</span>: <span class="hljs-type">text</span>/html; charset=ISO<span class="hljs-number">-8859</span><span class="hljs-number">-1</span><br>&lt; Vary: Accept-<span class="hljs-keyword">Encoding</span><br>&lt; P3P: CP=&quot;This is not a P3P policy! See g.co/p3phelp for more info.&quot;<br>&lt; Expires: <span class="hljs-number">-1</span><br>&lt; X-Frame-<span class="hljs-keyword">Options</span>: SAMEORIGIN<br>&lt;<br></code></pre></div></td></tr></table></figure><p>用户环境变量只在当前登录的ssh会话中有效，退出后自动失效，也可以手动取消代理：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">unset</span> https_proxy<br><span class="hljs-built_in">unset</span> http_proxy<br></code></pre></div></td></tr></table></figure><p>Warning: 搭建的代理服务器对允许连接的主机和允许访问的网站做了访问控制，<strong>只能用于服务器访问特定内容</strong>。</p><h2 id="💤在校外使用服务器"><a href="#💤在校外使用服务器" class="headerlink" title="💤在校外使用服务器"></a>💤在校外使用服务器</h2><h3 id="🔸直接使用ssh连接"><a href="#🔸直接使用ssh连接" class="headerlink" title="🔸直接使用ssh连接"></a>🔸直接使用ssh连接</h3><p>在之前的腾讯文档中，还列出了用于公网访问服务器的主机名和端口号，这是因为在学校中，我们可以通过IP地址互相访问（10.17x.x.x，A类局域网地址），但是这些都是属于学校的内网环境，一旦离开学校，便无法接入学校内网，学校的提供的VPN也只能访问学校的网站服务，不能用于连接服务器。这时想要直接访问学校服务器，就需要用到这些主机名和端口号。</p><p>Note: 在公网连接服务器时，峰值带宽为5Mbps（校园网内网带宽水平目前在50Mbps左右），在与服务器传输文件时速度会比较慢。在网络攻击的高峰期，可能会关闭这种方式的连接途径。</p><h3 id="🔸通过向日葵连接"><a href="#🔸通过向日葵连接" class="headerlink" title="🔸通过向日葵连接"></a>🔸通过向日葵连接</h3><p>如果在学校（实验室或者宿舍）有电脑的话，还可以在自己的电脑上安装向日葵，通过远程控制连接到自己在学校的电脑，然后再在学校的电脑上连接服务器。</p><p>实验室电脑的BIOS里面一般都设置了来电自启动，以应对在假期时实验室意断电导致电脑关机的情况。另外417的电脑都是通过交换机直接连接在校园网下的，需要自己<strong>创建拨号连接</strong>或者通过<strong>网页认证</strong>上网，网页认证在电脑不睡眠的情况下，可以保持较长时间的连接。而Win10的校园网拨号连接比较不稳定，建议配置开机自动拨号和掉线自动重播，方法比较多，可参考<a href="https://www.zhihu.com/question/59449991">win10宽带断线如何自动重拨？</a>。<strong>注意网页认证和拨号连接不能同时使用</strong>。如果有路由器的话，就不用考虑这些了。</p><h2 id="👁️‍🗨️远程桌面连接"><a href="#👁️‍🗨️远程桌面连接" class="headerlink" title="👁️‍🗨️远程桌面连接"></a>👁️‍🗨️远程桌面连接</h2><p>如果实验室的电脑或者自己的电脑使用的是<strong>win10企业版</strong>或者<strong>专业版</strong>的话，在校园网内可以直接使用win10自带的<strong>远程桌面连接</strong>功能，以较高的质量进行win10电脑之间的远程。</p><p>首先需要在受控电脑上打开<strong>远程桌面</strong>连接功能，允许被远程控制。</p><p><img src="/image/base/1630661766396.png"></p><p>在另一台电脑上打开“远程桌面连接”，在“计算机”中填入目标主机的IP地址，自己电脑的IP可以在网页查询：<a href="https://zfw.xidian.edu.cn/">流量查询</a>。</p><p><img src="/image/base/1630665044482.png"></p><p>点击<strong>更多选项–使用其他账户</strong>，输入远程主机的用户名和密码，连接即可。</p><p><img src="/image/base/1630665183748.png"></p><p>Note: 如果目标主机使用的微软账户，用户名要输入账户的邮箱。注意密码不是电脑的PIN。如果目标主机连接在路由器下，需要将Windows远程桌面连接的3389端口转发到路由器的某一端口（在路由器端口转发中设置），并在连接时的“计算机”中加入端口号信息，如 <code>ip:port</code>。手机上也有微软提供的远程桌面连接工具，名字为RDP Client。</p><p><a href="#%F0%9F%8E%A8%E5%AE%9E%E9%AA%8C%E5%AE%A4%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%B5%84%E6%BA%90">🔝回到顶部</a></p><p><img src="https://tool.lu/netcard/" alt="IP签名"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>844.比较含退格的字符串</title>
    <link href="/Solutions/844.%E6%AF%94%E8%BE%83%E5%90%AB%E9%80%80%E6%A0%BC%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/Solutions/844.%E6%AF%94%E8%BE%83%E5%90%AB%E9%80%80%E6%A0%BC%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="844-比较含退格的字符串"><a href="#844-比较含退格的字符串" class="headerlink" title="844.比较含退格的字符串"></a>844.比较含退格的字符串</h1><p>可能思路： 倒序 <strong>【TODO】</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">backspaceCompare</span><span class="hljs-params">(String s, String t)</span> &#123;<br>        <span class="hljs-type">char</span>[] charS = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[s.length()];<br>        <span class="hljs-type">char</span>[] charT = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[t.length()];<br><br>        <span class="hljs-comment">//下一位将要录入的索引值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">countS</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">countT</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <br>        <span class="hljs-comment">// 1.遍历String s，录入到char[] charS</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; s.length(); i++)&#123;<br>            <span class="hljs-type">char</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> s.charAt(i);<br>    <br>            <span class="hljs-comment">// 1.1 非#符号：录入一位char</span><br>            <span class="hljs-keyword">if</span>(value != <span class="hljs-string">&#x27;#&#x27;</span>)&#123;<br>                charS[countS] = value; <br>                countS++;<br>            &#125;<br>    <br>            <span class="hljs-comment">// 1.2 是#符号</span><br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">if</span>(countS &gt; <span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-comment">// 1.2.1 charS索引还未到最左（0），即 删除前一位</span><br>                    countS--;<br>                &#125;<br>                <span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-comment">// 1.2.2 charS索引已到最左（0），即 charS 已经为空 不改变</span><br>                &#125;<br>                <br>            &#125;<br>    <br>        &#125;<br><br><br>        <span class="hljs-comment">// 2.同理遍历String T，录入到char[] charT</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; t.length(); i++)&#123;<br>            <span class="hljs-type">char</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> t.charAt(i);<br>    <br>            <span class="hljs-comment">// 2.1 非#符号：录入一位char</span><br>            <span class="hljs-keyword">if</span>(value != <span class="hljs-string">&#x27;#&#x27;</span>)&#123;<br>                charT[countT] = value; <br>                countT++;<br>            &#125;<br>    <br>            <span class="hljs-comment">// 2.2 是#符号</span><br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">if</span>(countT &gt; <span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-comment">// 2.2.1 charS索引还未到最左（0），即 删除前一位</span><br>                    countT--;<br>                &#125;<br>                <span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-comment">// 2.2.2 charS索引已到最左（0），即 charS 已经为空 不改变</span><br>                &#125;<br>                <br>            &#125;<br>    <br>        &#125;<br><br><br>        <span class="hljs-comment">// 3. 比较charS 前(countS -1)位 与 charT 前(countT -1)位 是否相等</span><br>    <br>        <span class="hljs-comment">// 两char[] 有效长度不等</span><br>        <span class="hljs-keyword">if</span>(countS != countT)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    <br>        <span class="hljs-comment">// 两 char[] 都为空</span><br>        <span class="hljs-keyword">if</span>(countS == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <br>        <span class="hljs-keyword">while</span>(index &lt; countS)&#123;<br>            <span class="hljs-keyword">if</span>(charS[index] != charT[index])&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            index++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode-solution</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/Solutions/15.%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <url>/Solutions/15.%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="15-三数之和"><a href="#15-三数之和" class="headerlink" title="15. 三数之和"></a>15. 三数之和</h1><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">threeSum</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        HashMap&lt;Integer, Integer&gt; table = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        HashSet&lt;List&lt;Integer&gt;&gt; resSet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br>        List&lt;List&lt;Integer&gt;&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        <br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k : nums) &#123;<br>            table.put(k, table.getOrDefault(k, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>);<br>        &#125;<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k1 : table.keySet()) &#123;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">isFound</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-comment">//取一个数出来（table 中少一个 k1）</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">value1</span> <span class="hljs-operator">=</span> k1;<br>            table.put(k1, table.get(k1) - <span class="hljs-number">1</span>);<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k2 : table.keySet()) &#123;<br>                <span class="hljs-comment">//第二次取数出来（table 中少一个 k2）</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">count2</span> <span class="hljs-operator">=</span> table.get(k2);<br>                <span class="hljs-keyword">if</span> (count2 != <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">value2</span> <span class="hljs-operator">=</span> k2;<br>                    table.put(k2, count2 - <span class="hljs-number">1</span>);<br><br>                    <span class="hljs-keyword">if</span> (table.get(- k1 - k2) != <span class="hljs-literal">null</span>) &#123;<br>                        <span class="hljs-keyword">if</span> (table.get(-k1 - k2) != <span class="hljs-number">0</span>) &#123;<br>                            isFound = <span class="hljs-literal">true</span>;<br>                            <span class="hljs-type">int</span> <span class="hljs-variable">value3</span> <span class="hljs-operator">=</span> - k1 - k2;<br>                            List&lt;Integer&gt; tmp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>                            tmp.add(value1);<br>                            tmp.add(value2);<br>                            tmp.add(value3);<br>                            Collections.sort(tmp);<br>                            <span class="hljs-comment">//add to result list</span><br>                            <span class="hljs-comment">//list 若为空，则不含重复，直接添加</span><br>                            <span class="hljs-keyword">if</span> (res.isEmpty()) &#123;<br>                                res.add(tmp);<br>                            &#125;<br>                            <span class="hljs-comment">//list 不为空，则判断结果是否已存在</span><br>                            <span class="hljs-keyword">else</span> &#123;<br>                                <span class="hljs-type">boolean</span> <span class="hljs-variable">isExisted</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>                                <span class="hljs-keyword">for</span> (List&lt;Integer&gt; ls : res) &#123;<br>                                    <span class="hljs-keyword">if</span> (ls.equals(tmp)) &#123;<br>                                        isExisted = <span class="hljs-literal">true</span>;<br>                                        <span class="hljs-keyword">break</span>;<br>                                    &#125;<br>                                &#125;<br>                                <span class="hljs-keyword">if</span> (!isExisted) &#123;<br>                                    res.add(tmp);<br>                                &#125;<br>                            &#125;<br>                        &#125; <br>                    &#125;<br>                    <span class="hljs-comment">//放回 k2</span><br>                    table.put(k2, table.get(k2) + <span class="hljs-number">1</span>);<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">//放回 k1</span><br>            table.put(k1, table.get(k1) + <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>优化存储结果的List 改为HashSet</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">threeSum</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        HashMap&lt;Integer, Integer&gt; table = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        HashSet&lt;List&lt;Integer&gt;&gt; resSet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br>        List&lt;List&lt;Integer&gt;&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        <br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k : nums) &#123;<br>            table.put(k, table.getOrDefault(k, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>);<br>        &#125;<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k1 : table.keySet()) &#123;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">isFound</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-comment">//取一个数出来（table 中少一个 k1）</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">value1</span> <span class="hljs-operator">=</span> k1;<br>            table.put(k1, table.get(k1) - <span class="hljs-number">1</span>);<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k2 : table.keySet()) &#123;<br>                <span class="hljs-comment">//第二次取数出来（table 中少一个 k2）</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">count2</span> <span class="hljs-operator">=</span> table.get(k2);<br>                <span class="hljs-keyword">if</span> (count2 != <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">value2</span> <span class="hljs-operator">=</span> k2;<br>                    table.put(k2, count2 - <span class="hljs-number">1</span>);<br><br>                    <span class="hljs-keyword">if</span> (table.get(- k1 - k2) != <span class="hljs-literal">null</span>) &#123;<br>                        <span class="hljs-keyword">if</span> (table.get(-k1 - k2) != <span class="hljs-number">0</span>) &#123;<br>                            isFound = <span class="hljs-literal">true</span>;<br>                            <span class="hljs-type">int</span> <span class="hljs-variable">value3</span> <span class="hljs-operator">=</span> - k1 - k2;<br>                            List&lt;Integer&gt; tmp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>                            tmp.add(value1);<br>                            tmp.add(value2);<br>                            tmp.add(value3);<br>                            Collections.sort(tmp);<br>                            <span class="hljs-comment">//add to result hashset</span><br>                            resSet.add(tmp);<br><br>                            <span class="hljs-comment">// //list 若为空，则不含重复，直接添加</span><br>                            <span class="hljs-comment">// if (res.isEmpty()) &#123;</span><br>                            <span class="hljs-comment">//     res.add(tmp);</span><br>                            <span class="hljs-comment">// &#125;</span><br>                            <span class="hljs-comment">// //list 不为空，则判断结果是否已存在</span><br>                            <span class="hljs-comment">// else &#123;</span><br>                            <span class="hljs-comment">//     boolean isExisted = false;</span><br>                            <span class="hljs-comment">//     for (List&lt;Integer&gt; ls : res) &#123;</span><br>                            <span class="hljs-comment">//         if (ls.equals(tmp)) &#123;</span><br>                            <span class="hljs-comment">//             isExisted = true;</span><br>                            <span class="hljs-comment">//             break;</span><br>                            <span class="hljs-comment">//         &#125;</span><br>                            <span class="hljs-comment">//     &#125;</span><br>                            <span class="hljs-comment">//     if (!isExisted) &#123;</span><br>                            <span class="hljs-comment">//         res.add(tmp);</span><br>                            <span class="hljs-comment">//     &#125;</span><br>                            <span class="hljs-comment">// &#125;</span><br>                        &#125; <br>                    &#125;<br>                    <span class="hljs-comment">//放回 k2</span><br>                    table.put(k2, table.get(k2) + <span class="hljs-number">1</span>);<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">//放回 k1</span><br>            table.put(k1, table.get(k1) + <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (List&lt;Integer&gt; ls : resSet) &#123;<br>            res.add(ls);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>&amp;nbsp;</p><ul><li>不使用哈希表 只使用指针 则三层for循环；</li><li>题目要求不能重复，则 可以先对nums排序 后输出结果，再去重。（如下方法，再加入哈希表去重即可，但复杂度未变 O(N3)）</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">threeSum</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> nums.length;<br>        Arrays.sort(nums);<br><br>        List&lt;List&lt;Integer&gt;&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; a &lt; len; a++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> a + <span class="hljs-number">1</span>; b &lt; len; b++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> b + <span class="hljs-number">1</span>; c &lt; len; c++) &#123;<br>                    <span class="hljs-keyword">if</span> (nums[a] + nums[b] + nums[c] == <span class="hljs-number">0</span>) &#123;<br>                        List&lt;Integer&gt; newList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>                        newList.add(nums[a]);<br>                        newList.add(nums[b]);<br>                        newList.add(nums[c]);<br>                        res.add(newList);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li><p>双指针</p><p>循环a，内部嵌套双指针b,c ，bc共遍历一遍。故总复杂度n2。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">threeSum</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> nums.length;<br>        Arrays.sort(nums);<br><br>        List&lt;List&lt;Integer&gt;&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        List&lt;Integer&gt; preList = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (len &lt; <span class="hljs-number">3</span>) &#123;<span class="hljs-keyword">return</span> res;&#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">preA</span> <span class="hljs-operator">=</span> nums[<span class="hljs-number">0</span>];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; a &lt; len; a++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> len - <span class="hljs-number">1</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">tarV</span> <span class="hljs-operator">=</span> - nums[a];<br>            <span class="hljs-keyword">if</span> (a == <span class="hljs-number">0</span> || nums[a] != preA) &#123;<br>                preA = nums[a];<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> a + <span class="hljs-number">1</span>; b &lt; len; b++) &#123;<br>                    <span class="hljs-keyword">if</span> (b == c) &#123; <span class="hljs-keyword">break</span>;&#125;<br>                    <span class="hljs-comment">// boolean bcEqual = false;</span><br>                    <span class="hljs-comment">//若b为a之后的第一位 或 nums[b] 的值改变, 否则继续循环 b++</span><br>                    <span class="hljs-keyword">if</span> (b == a + <span class="hljs-number">1</span> || nums[b] != nums[b - <span class="hljs-number">1</span>]) &#123;<br>                        <span class="hljs-comment">//c 指针左移，直到tarV 不大于 nums[b] + nums[c]</span><br>                        <span class="hljs-keyword">while</span> (tarV &lt; nums[b] + nums[c]) &#123;<br>                            c--;<br>                            <span class="hljs-keyword">if</span> (b == c) &#123; <span class="hljs-keyword">break</span>;&#125;<br>                        &#125;<br>                        <span class="hljs-keyword">if</span> (b == c) &#123; <span class="hljs-keyword">break</span>;&#125;<br>                        <span class="hljs-keyword">if</span> (tarV == nums[b] + nums[c]) &#123;<br>                            List&lt;Integer&gt; newList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>                            newList.add(nums[a]);<br>                            newList.add(nums[b]);<br>                            newList.add(nums[c]);<br>                            res.add(newList);<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>📝My LeetCode Note</title>
    <link href="/My-LeetCode-Note/"/>
    <url>/My-LeetCode-Note/</url>
    
    <content type="html"><![CDATA[<h1 id="📝My-LeetCode-Note"><a href="#📝My-LeetCode-Note" class="headerlink" title="📝My LeetCode Note"></a>📝My LeetCode Note</h1><h2 id="🗺️路线"><a href="#🗺️路线" class="headerlink" title="🗺️路线:"></a>🗺️路线:</h2><ul><li><a href="#%E6%95%B0-%E7%BB%84">🔢数组</a> –&gt; <a href="#%EF%B8%8F%E9%93%BE-%E8%A1%A8">⛓️链表</a> –&gt; <a href="#%E5%93%88-%E5%B8%8C-%E8%A1%A8">🧾哈希表</a> –&gt; <a href="#%E5%AD%97-%E7%AC%A6-%E4%B8%B2">🔡字符串</a> –&gt; <a href="#%EF%B8%8F%E5%8F%8C-%E6%8C%87-%E9%92%88-%E6%B3%95">🈯️双指针法</a>  –&gt; <a href="#%E6%A0%88-%E4%B8%8E-%E9%98%9F-%E5%88%97">🎢栈与队列</a> –&gt; <a href="#%E6%A0%91">🌳树</a> –&gt; <a href="#%E5%9B%9E-%E6%BA%AF">🔙回溯</a> –&gt; <a href="#%E8%B4%AA-%E5%BF%83">💯贪心</a> –&gt; <a href="#%E5%8A%A8-%E6%80%81-%E8%A7%84-%E5%88%92">📡动态规划</a> –&gt; <a href="#%E5%9B%BE-%E8%AE%BA">🧩图论</a> –&gt; <a href="#%E9%AB%98-%E7%BA%A7-%E6%95%B0-%E6%8D%AE-%E7%BB%93-%E6%9E%84">🎯高级数据结构</a></li></ul><span id="more"></span><p>按题型刷完后，再从<code>简单</code>刷起，做了几个类型题目之后，再慢慢做<code>中等</code>题目、<code>困难</code>题目。</p><ul><li><p>路线 from：<a href="https://programmercarl.com/">代码随想录</a></p></li><li><p>题解语言：<code>Java</code></p></li></ul><hr><h2 id="🔢数-组"><a href="#🔢数-组" class="headerlink" title="🔢数 组"></a>🔢数 组</h2><h3 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27. 移除元素"></a>27. 移除元素</h3><ul><li><strong>【TODO】</strong></li></ul><h3 id="26-删除排序数组中的重复项"><a href="#26-删除排序数组中的重复项" class="headerlink" title="26. 删除排序数组中的重复项"></a>26. 删除排序数组中的重复项</h3><ul><li><strong>【TODO】</strong></li></ul><h3 id="283-移动零"><a href="#283-移动零" class="headerlink" title="283. 移动零"></a>283. 移动零</h3><ul><li><strong>【TODO】</strong></li></ul><h3 id=""><a href="#" class="headerlink" title=""></a><a href="/Solutions/844.%E6%AF%94%E8%BE%83%E5%90%AB%E9%80%80%E6%A0%BC%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/" title="844. 比较含退格的字符串">844. 比较含退格的字符串</a></h3><h3 id="977-有序数组的平方"><a href="#977-有序数组的平方" class="headerlink" title="977. 有序数组的平方"></a><a href="./Solutions/977.%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9.md">977. 有序数组的平方</a></h3><h3 id="209-长度最小的子数组"><a href="#209-长度最小的子数组" class="headerlink" title="209. 长度最小的子数组"></a><a href="./Solutions/209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.md">209. 长度最小的子数组</a></h3><h3 id="904-水果成篮"><a href="#904-水果成篮" class="headerlink" title="904. 水果成篮"></a><a href="./Solutions/904.%E6%B0%B4%E6%9E%9C%E6%88%90%E7%AF%AE.md">904. 水果成篮</a></h3><h3 id="76-最小覆盖子串"><a href="#76-最小覆盖子串" class="headerlink" title="76. 最小覆盖子串"></a><a href="./Solutions/76.%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2.md">76. 最小覆盖子串</a></h3><h3 id="59-螺旋矩阵-II"><a href="#59-螺旋矩阵-II" class="headerlink" title="59. 螺旋矩阵 II"></a><a href="./Solutions/59.%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5II.md">59. 螺旋矩阵 II</a></h3><hr><h2 id="⛓️链-表"><a href="#⛓️链-表" class="headerlink" title="⛓️链 表"></a>⛓️链 表</h2><h3 id="203-移除链表元素"><a href="#203-移除链表元素" class="headerlink" title="203. 移除链表元素"></a><a href="./Solutions/203.%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0.md">203. 移除链表元素</a></h3><h3 id="707-设计链表"><a href="#707-设计链表" class="headerlink" title="707. 设计链表"></a><a href="./Solutions/707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8.md">707. 设计链表</a></h3><h3 id="206-反转链表"><a href="#206-反转链表" class="headerlink" title="206. 反转链表"></a><a href="./Solutions/206.%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8.md">206. 反转链表</a></h3><h3 id="24-两两交换链表中的节点"><a href="#24-两两交换链表中的节点" class="headerlink" title="24. 两两交换链表中的节点"></a><a href="./Solutions/24.%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9.md">24. 两两交换链表中的节点</a></h3><h3 id="19-删除链表的倒数第-N-个结点"><a href="#19-删除链表的倒数第-N-个结点" class="headerlink" title="19. 删除链表的倒数第 N 个结点"></a><a href="./Solutions/19.%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E7%BB%93%E7%82%B9.md">19. 删除链表的倒数第 N 个结点</a></h3><h3 id="面试题-02-07-链表相交"><a href="#面试题-02-07-链表相交" class="headerlink" title="面试题 02.07. 链表相交"></a><a href="./Solutions/%E9%9D%A2%E8%AF%95%E9%A2%9802.07.%E9%93%BE%E8%A1%A8%E7%9B%B8%E4%BA%A4.md">面试题 02.07. 链表相交</a></h3><h3 id="142-环形链表II"><a href="#142-环形链表II" class="headerlink" title="142. 环形链表II"></a><a href="./Solutions/142.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II.md">142. 环形链表II</a></h3><hr><h2 id="🧾哈-希-表"><a href="#🧾哈-希-表" class="headerlink" title="🧾哈 希 表"></a>🧾哈 希 表</h2><h3 id="基础："><a href="#基础：" class="headerlink" title="基础："></a>基础：</h3><p><strong>当我们遇到了要快速判断一个元素是否出现集合里的时候，就要考虑哈希法</strong>。</p><p>但是哈希法也是<strong>牺牲了空间换取了时间</strong>，因为我们要使用额外的数组，set或者是map来存放数据，才能实现快速的查找。</p><p>如果在做面试题目的时候遇到需要判断一个元素是否出现过的场景也应该第一时间想到哈希法！</p><p><a href="https://programmercarl.com/%E5%93%88%E5%B8%8C%E8%A1%A8%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html#%E5%B8%B8%E8%A7%81%E7%9A%84%E4%B8%89%E7%A7%8D%E5%93%88%E5%B8%8C%E7%BB%93%E6%9E%84">( from 代码随想录 哈希表理论基础 )</a></p><h3 id="242-有效的字母异位词"><a href="#242-有效的字母异位词" class="headerlink" title="242. 有效的字母异位词"></a><a href="./Solutions/242.%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D.md">242. 有效的字母异位词</a></h3><h3 id="383-赎金信"><a href="#383-赎金信" class="headerlink" title="383. 赎金信"></a><a href="./Solutions/383.%E8%B5%8E%E9%87%91%E4%BF%A1.md">383. 赎金信</a></h3><h3 id="49-字母异位词分组"><a href="#49-字母异位词分组" class="headerlink" title="49. 字母异位词分组"></a><a href="./Solutions/49.%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D%E5%88%86%E7%BB%84.md">49. 字母异位词分组</a></h3><h3 id="438-找到字符串中所有字母异位词"><a href="#438-找到字符串中所有字母异位词" class="headerlink" title="438. 找到字符串中所有字母异位词"></a><a href="./Solutions/438.%E6%89%BE%E5%88%B0%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E6%89%80%E6%9C%89%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D.md">438. 找到字符串中所有字母异位词</a></h3><h3 id="349-两个数组的交集"><a href="#349-两个数组的交集" class="headerlink" title="349. 两个数组的交集"></a><a href="./Solutions/350.%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86II.md">349. 两个数组的交集</a></h3><h3 id="202-快乐数"><a href="#202-快乐数" class="headerlink" title="202. 快乐数"></a><a href="./Solutions/202.%E5%BF%AB%E4%B9%90%E6%95%B0.md">202. 快乐数</a></h3><h3 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1. 两数之和"></a>1. 两数之和</h3><ul><li><strong>【TODO】</strong></li></ul><h3 id="454-四数相加II"><a href="#454-四数相加II" class="headerlink" title="454. 四数相加II"></a><a href="./Solutions/454.%E5%9B%9B%E6%95%B0%E7%9B%B8%E5%8A%A0II.md">454. 四数相加II</a></h3><h3 id="15-三数之和"><a href="#15-三数之和" class="headerlink" title="15. 三数之和"></a><a href="./Solutions/15.%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C.md">15. 三数之和</a></h3><h3 id="18-四数之和"><a href="#18-四数之和" class="headerlink" title="18. 四数之和"></a>18. 四数之和</h3><ul><li><strong>【TODO】</strong></li></ul><hr><h2 id="🔡字-符-串"><a href="#🔡字-符-串" class="headerlink" title="🔡字 符 串"></a>🔡字 符 串</h2><h3 id="344-反转字符串"><a href="#344-反转字符串" class="headerlink" title="344. 反转字符串"></a>344. 反转字符串</h3><ul><li><strong>【TODO】</strong></li></ul><h3 id="541-反转字符串II"><a href="#541-反转字符串II" class="headerlink" title="541. 反转字符串II"></a><a href="./Solutions/541.%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2II.md">541. 反转字符串II</a></h3><h3 id="剑指Offer-05-替换空格"><a href="#剑指Offer-05-替换空格" class="headerlink" title="剑指Offer 05. 替换空格"></a><a href="./Solutions/%E5%89%91%E6%8C%87Offer05.%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC.md">剑指Offer 05. 替换空格</a></h3><h3 id="151-翻转字符串里的单词"><a href="#151-翻转字符串里的单词" class="headerlink" title="151. 翻转字符串里的单词"></a><a href="./Solutions/151.%E7%BF%BB%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%87%8C%E7%9A%84%E5%8D%95%E8%AF%8D.md">151. 翻转字符串里的单词</a></h3><h3 id="剑指Offer58-II-左旋转字符串"><a href="#剑指Offer58-II-左旋转字符串" class="headerlink" title="剑指Offer58-II. 左旋转字符串"></a><a href="./Solutions/%E5%89%91%E6%8C%87Offer58-II.%E5%B7%A6%E6%97%8B%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2.md">剑指Offer58-II. 左旋转字符串</a></h3><h3 id="28-实现-strStr"><a href="#28-实现-strStr" class="headerlink" title="28. 实现 strStr()"></a><a href="./Solutions/28.%E5%AE%9E%E7%8E%B0strStr().md">28. 实现 strStr()</a></h3><h3 id="459-重复的子字符串"><a href="#459-重复的子字符串" class="headerlink" title="459. 重复的子字符串"></a><a href="./Solutions/459.%E9%87%8D%E5%A4%8D%E7%9A%84%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2.md">459. 重复的子字符串</a></h3><hr><h2 id="🈯️双-指-针-法"><a href="#🈯️双-指-针-法" class="headerlink" title="🈯️双 指 针 法"></a>🈯️双 指 针 法</h2><h3 id="27-移除元素-1"><a href="#27-移除元素-1" class="headerlink" title="27. 移除元素"></a><a href="./Solutions/27.%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0.md">27. 移除元素</a></h3><h3 id="344-反转字符串-1"><a href="#344-反转字符串-1" class="headerlink" title="344. 反转字符串"></a><a href="./Solutions/344.%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2.md">344. 反转字符串</a></h3><h3 id="151-翻转字符串里的单词-1"><a href="#151-翻转字符串里的单词-1" class="headerlink" title="151.翻转字符串里的单词"></a>151.翻转字符串里的单词</h3><h3 id="206-反转链表-1"><a href="#206-反转链表-1" class="headerlink" title="206.反转链表"></a>206.反转链表</h3><h3 id="19-删除链表的倒数第N个节点"><a href="#19-删除链表的倒数第N个节点" class="headerlink" title="19.删除链表的倒数第N个节点"></a>19.删除链表的倒数第N个节点</h3><h3 id="面试题-02-07-链表相交-1"><a href="#面试题-02-07-链表相交-1" class="headerlink" title="面试题 02.07. 链表相交"></a>面试题 02.07. 链表相交</h3><h3 id="142-环形链表II-1"><a href="#142-环形链表II-1" class="headerlink" title="142.环形链表II"></a>142.环形链表II</h3><h3 id="15-三数之和-1"><a href="#15-三数之和-1" class="headerlink" title="15. 三数之和"></a>15. 三数之和</h3><h3 id="18-四数之和-1"><a href="#18-四数之和-1" class="headerlink" title="18. 四数之和"></a>18. 四数之和</h3><hr><h2 id="🎢栈-与-队-列"><a href="#🎢栈-与-队-列" class="headerlink" title="🎢栈 与 队 列"></a>🎢栈 与 队 列</h2><h3 id="232-用栈实现队列"><a href="#232-用栈实现队列" class="headerlink" title="232. 用栈实现队列"></a><a href="./Solutions/232.%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97.md">232. 用栈实现队列</a></h3><h3 id="225-用队列实现栈"><a href="#225-用队列实现栈" class="headerlink" title="225. 用队列实现栈"></a><a href="./Solutions/225.%E7%94%A8%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88.md">225. 用队列实现栈</a></h3><h3 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20. 有效的括号"></a><a href="./Solutions/20.%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7.md">20. 有效的括号</a></h3><h3 id="1047-删除字符串中的所有相邻重复项"><a href="#1047-删除字符串中的所有相邻重复项" class="headerlink" title="1047. 删除字符串中的所有相邻重复项"></a><a href="./Solutions/1047.%E5%88%A0%E9%99%A4%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E7%9B%B8%E9%82%BB%E9%87%8D%E5%A4%8D%E9%A1%B9.md">1047. 删除字符串中的所有相邻重复项</a></h3><h3 id="150-逆波兰表达式求值"><a href="#150-逆波兰表达式求值" class="headerlink" title="150. 逆波兰表达式求值"></a><a href="./Solutions/150.%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC.md">150. 逆波兰表达式求值</a></h3><h3 id="239-滑动窗口最大值"><a href="#239-滑动窗口最大值" class="headerlink" title="239. 滑动窗口最大值"></a><a href="./Solutions/239.%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC.md">239. 滑动窗口最大值</a></h3><h3 id="347-前K个高频元素"><a href="#347-前K个高频元素" class="headerlink" title="347. 前K个高频元素"></a><a href="./Solutions/347.%E5%89%8DK%E4%B8%AA%E9%AB%98%E9%A2%91%E5%85%83%E7%B4%A0.md">347. 前K个高频元素</a></h3><h3 id="栈与队列总结"><a href="#栈与队列总结" class="headerlink" title="栈与队列总结"></a>栈与队列总结</h3><ul><li><strong>【TODO】</strong></li></ul><hr><h2 id="🌳树"><a href="#🌳树" class="headerlink" title="🌳树"></a>🌳树</h2><h3 id="144-二叉树的前序遍历"><a href="#144-二叉树的前序遍历" class="headerlink" title="144. 二叉树的前序遍历"></a><a href="./Solutions/144.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86.md">144. 二叉树的前序遍历</a></h3><h3 id="145-二叉树的后序遍历"><a href="#145-二叉树的后序遍历" class="headerlink" title="145. 二叉树的后序遍历"></a><a href="./Solutions/145.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86.md">145. 二叉树的后序遍历</a></h3><h3 id="94-二叉树的中序遍历"><a href="#94-二叉树的中序遍历" class="headerlink" title="94. 二叉树的中序遍历"></a><a href="./Solutions/94.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86.md">94. 二叉树的中序遍历</a></h3><h3 id="102-二叉树的层序遍历"><a href="#102-二叉树的层序遍历" class="headerlink" title="102. 二叉树的层序遍历"></a><a href="./Solutions/102.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86.md">102. 二叉树的层序遍历</a></h3><h3 id="226-翻转二叉树"><a href="#226-翻转二叉树" class="headerlink" title="226. 翻转二叉树"></a><a href="./Solutions/226.%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91.md">226. 翻转二叉树</a></h3><h3 id="101-对称二叉树"><a href="#101-对称二叉树" class="headerlink" title="101. 对称二叉树"></a><a href="./Solutions/101.%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91.md">101. 对称二叉树</a></h3><h3 id="104-二叉树的最大深度"><a href="#104-二叉树的最大深度" class="headerlink" title="104. 二叉树的最大深度"></a><a href="./Solutions/104.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6.md">104. 二叉树的最大深度</a></h3><h3 id="559-n叉树的最大深度"><a href="#559-n叉树的最大深度" class="headerlink" title="559. n叉树的最大深度"></a>559. n叉树的最大深度</h3><h3 id="111-二叉树的最小深度"><a href="#111-二叉树的最小深度" class="headerlink" title="111. 二叉树的最小深度"></a><a href="./Solutions/111.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E6%B7%B1%E5%BA%A6.md">111. 二叉树的最小深度</a></h3><h3 id="222-完全二叉树的节点个数"><a href="#222-完全二叉树的节点个数" class="headerlink" title="222. 完全二叉树的节点个数"></a><a href="./Solutions/222.%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E8%8A%82%E7%82%B9%E4%B8%AA%E6%95%B0.md">222. 完全二叉树的节点个数</a></h3><h3 id="110-平衡二叉树"><a href="#110-平衡二叉树" class="headerlink" title="110. 平衡二叉树"></a><a href="./Solutions/110.%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91.md">110. 平衡二叉树</a></h3><h3 id="257-二叉树的所有路径"><a href="#257-二叉树的所有路径" class="headerlink" title="257. 二叉树的所有路径"></a><a href="./Solutions/257.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%89%80%E6%9C%89%E8%B7%AF%E5%BE%84.md">257. 二叉树的所有路径</a></h3><h3 id="404-左叶子之和"><a href="#404-左叶子之和" class="headerlink" title="404. 左叶子之和"></a><a href="./Solutions/404.%E5%B7%A6%E5%8F%B6%E5%AD%90%E4%B9%8B%E5%92%8C.md">404. 左叶子之和</a></h3><h3 id="513-找树左下角的值"><a href="#513-找树左下角的值" class="headerlink" title="513. 找树左下角的值"></a><a href="./Solutions/513.%E6%89%BE%E6%A0%91%E5%B7%A6%E4%B8%8B%E8%A7%92%E7%9A%84%E5%80%BC.md">513. 找树左下角的值</a></h3><h3 id="112-路径总和"><a href="#112-路径总和" class="headerlink" title="112. 路径总和"></a><a href="./Solutions/112.%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8C.md">112. 路径总和</a></h3><h3 id="106-从中序与后序遍历序列构造二叉树"><a href="#106-从中序与后序遍历序列构造二叉树" class="headerlink" title="106. 从中序与后序遍历序列构造二叉树"></a>106. 从中序与后序遍历序列构造二叉树</h3><h3 id="654-最大二叉树"><a href="#654-最大二叉树" class="headerlink" title="654. 最大二叉树"></a><a href="./Solutions/654.%E6%9C%80%E5%A4%A7%E4%BA%8C%E5%8F%89%E6%A0%91.md">654. 最大二叉树</a></h3><h3 id="617-合并二叉树"><a href="#617-合并二叉树" class="headerlink" title="617. 合并二叉树"></a><a href="./Solutions/617.%E5%90%88%E5%B9%B6%E4%BA%8C%E5%8F%89%E6%A0%91.md">617. 合并二叉树</a></h3><h3 id="700-二叉搜索树中的搜索"><a href="#700-二叉搜索树中的搜索" class="headerlink" title="700. 二叉搜索树中的搜索"></a><a href="./Solutions/700.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E6%90%9C%E7%B4%A2.md">700. 二叉搜索树中的搜索</a></h3><h3 id="98-验证二叉搜索树"><a href="#98-验证二叉搜索树" class="headerlink" title="98. 验证二叉搜索树"></a><a href="./Solutions/98.%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91.md">98. 验证二叉搜索树</a></h3><h3 id="530-二叉搜索树的最小绝对差"><a href="#530-二叉搜索树的最小绝对差" class="headerlink" title="530. 二叉搜索树的最小绝对差"></a><a href="./Solutions/530.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E7%BB%9D%E5%AF%B9%E5%B7%AE.md">530. 二叉搜索树的最小绝对差</a></h3><h3 id="501-二叉搜索树中的众数"><a href="#501-二叉搜索树中的众数" class="headerlink" title="501. 二叉搜索树中的众数"></a><a href="./Solutions/501.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E4%BC%97%E6%95%B0.md">501. 二叉搜索树中的众数</a></h3><h3 id="236-二叉树的最近公共祖先"><a href="#236-二叉树的最近公共祖先" class="headerlink" title="236. 二叉树的最近公共祖先"></a><a href="./Solutions/236.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88.md">236. 二叉树的最近公共祖先</a></h3><h3 id="235-二叉搜索树的最近公共祖先"><a href="#235-二叉搜索树的最近公共祖先" class="headerlink" title="235. 二叉搜索树的最近公共祖先"></a><a href="./Solutions/235.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88.md">235. 二叉搜索树的最近公共祖先</a></h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><br></code></pre></div></td></tr></table></figure><h3 id="701-二叉搜索树中的插入操作"><a href="#701-二叉搜索树中的插入操作" class="headerlink" title="701. 二叉搜索树中的插入操作"></a><a href="./Solutions/701.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C.md">701. 二叉搜索树中的插入操作</a></h3><h3 id="450-删除二叉搜索树中的节点"><a href="#450-删除二叉搜索树中的节点" class="headerlink" title="450. 删除二叉搜索树中的节点"></a><a href="./Solutions/450.%E5%88%A0%E9%99%A4%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9.md">450. 删除二叉搜索树中的节点</a></h3><h3 id="669-修剪二叉搜索树"><a href="#669-修剪二叉搜索树" class="headerlink" title="669. 修剪二叉搜索树"></a><a href="./Solutions/669.%E4%BF%AE%E5%89%AA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91.md">669. 修剪二叉搜索树</a></h3><h3 id="108-将有序数组转换为二叉搜索树"><a href="#108-将有序数组转换为二叉搜索树" class="headerlink" title="108. 将有序数组转换为二叉搜索树"></a><a href="./Solutions/108.%E5%B0%86%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E8%BD%AC%E6%8D%A2%E4%B8%BA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91.md">108. 将有序数组转换为二叉搜索树</a></h3><h3 id="538-把二叉搜索树转换为累加树"><a href="#538-把二叉搜索树转换为累加树" class="headerlink" title="538. 把二叉搜索树转换为累加树"></a><a href="./Solutions/538.%E6%8A%8A%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E8%BD%AC%E6%8D%A2%E4%B8%BA%E7%B4%AF%E5%8A%A0%E6%A0%91.md">538. 把二叉搜索树转换为累加树</a></h3><hr><h2 id="🔙回-溯"><a href="#🔙回-溯" class="headerlink" title="🔙回 溯"></a>🔙回 溯</h2><h3 id="77-组合"><a href="#77-组合" class="headerlink" title="77. 组合"></a><a href="./Solutions/77.%E7%BB%84%E5%90%88.md">77. 组合</a></h3><h3 id="216-组合总和-III-x2F-Solutions-x2F-216-组合总和-III-md"><a href="#216-组合总和-III-x2F-Solutions-x2F-216-组合总和-III-md" class="headerlink" title="[216. 组合总和 III](.&#x2F;Solutions&#x2F;216.组合总和 III.md)"></a>[216. 组合总和 III](.&#x2F;Solutions&#x2F;216.组合总和 III.md)</h3><h3 id="17-电话号码的字母组合"><a href="#17-电话号码的字母组合" class="headerlink" title="17. 电话号码的字母组合"></a><a href="./Solutions/17.%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88.md">17. 电话号码的字母组合</a></h3><h3 id="39-组合总和"><a href="#39-组合总和" class="headerlink" title="39. 组合总和"></a><a href="./Solutions/39.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C.md">39. 组合总和</a></h3><h3 id="40-组合总和II"><a href="#40-组合总和II" class="headerlink" title="40. 组合总和II"></a><a href="./Solutions/40.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CII.md">40. 组合总和II</a></h3><h3 id="131-分割回文串"><a href="#131-分割回文串" class="headerlink" title="131. 分割回文串"></a><a href="./Solutions/131.%E5%88%86%E5%89%B2%E5%9B%9E%E6%96%87%E4%B8%B2.md">131. 分割回文串</a></h3><h3 id="93-复原IP地址"><a href="#93-复原IP地址" class="headerlink" title="93. 复原IP地址"></a><a href="./Solutions/93.%E5%A4%8D%E5%8E%9FIP%E5%9C%B0%E5%9D%80.md">93. 复原IP地址</a></h3><h3 id="78-子集问题"><a href="#78-子集问题" class="headerlink" title="78. 子集问题"></a><a href="./Solutions/78.%E5%AD%90%E9%9B%86%E9%97%AE%E9%A2%98.md">78. 子集问题</a></h3><h3 id="90-子集II"><a href="#90-子集II" class="headerlink" title="90. 子集II"></a><a href="./Solutions/90.%E5%AD%90%E9%9B%86II.md">90. 子集II</a></h3><h3 id="491-递增子序列"><a href="#491-递增子序列" class="headerlink" title="491. 递增子序列"></a><a href="./Solutions/491.%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97.md">491. 递增子序列</a></h3><h3 id="46-全排列"><a href="#46-全排列" class="headerlink" title="46. 全排列"></a><a href="./Solutions/446.%E5%85%A8%E6%8E%92%E5%88%97.md">46. 全排列</a></h3><h3 id="47-全排列II"><a href="#47-全排列II" class="headerlink" title="47. 全排列II"></a><a href="./Solutions/47.%E5%85%A8%E6%8E%92%E5%88%97II.md">47. 全排列II</a></h3><h3 id="332-重新安排行程"><a href="#332-重新安排行程" class="headerlink" title="332. 重新安排行程"></a><a href="./Solutions/332.%E9%87%8D%E6%96%B0%E5%AE%89%E6%8E%92%E8%A1%8C%E7%A8%8B.md">332. 重新安排行程</a></h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><br></code></pre></div></td></tr></table></figure><h3 id="51-N皇后"><a href="#51-N皇后" class="headerlink" title="51. N皇后"></a>51. N皇后</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><br></code></pre></div></td></tr></table></figure><h3 id="37-解数独"><a href="#37-解数独" class="headerlink" title="37. 解数独"></a>37. 解数独</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><br></code></pre></div></td></tr></table></figure><hr><h2 id="💯贪-心"><a href="#💯贪-心" class="headerlink" title="💯贪 心"></a>💯贪 心</h2><h3 id="455-分发饼干"><a href="#455-分发饼干" class="headerlink" title="455. 分发饼干"></a><a href="./Solutions/455.%E5%88%86%E5%8F%91%E9%A5%BC%E5%B9%B2.md">455. 分发饼干</a></h3><h3 id="376-摆动序列"><a href="#376-摆动序列" class="headerlink" title="376. 摆动序列"></a><a href="./Solutions/376.%E6%91%86%E5%8A%A8%E5%BA%8F%E5%88%97.md">376. 摆动序列</a></h3><h3 id="53-最大子序和"><a href="#53-最大子序和" class="headerlink" title="53. 最大子序和"></a><a href="./Solutions/53.%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C.md">53. 最大子序和</a></h3><h3 id="122-买卖股票的最佳时机II"><a href="#122-买卖股票的最佳时机II" class="headerlink" title="122. 买卖股票的最佳时机II"></a>122. 买卖股票的最佳时机II</h3><h3 id="55-跳跃游戏"><a href="#55-跳跃游戏" class="headerlink" title="55. 跳跃游戏"></a>55. 跳跃游戏</h3><h3 id="45-跳跃游戏II"><a href="#45-跳跃游戏II" class="headerlink" title="45. 跳跃游戏II"></a>45. 跳跃游戏II</h3><h3 id="134-加油站"><a href="#134-加油站" class="headerlink" title="134. 加油站"></a>134. 加油站</h3><h3 id="135-分发糖果"><a href="#135-分发糖果" class="headerlink" title="135. 分发糖果"></a>135. 分发糖果</h3><h3 id="860-柠檬水找零"><a href="#860-柠檬水找零" class="headerlink" title="860. 柠檬水找零"></a>860. 柠檬水找零</h3><h3 id="435-无重叠区间"><a href="#435-无重叠区间" class="headerlink" title="435. 无重叠区间"></a>435. 无重叠区间</h3><h3 id="763-划分字母区间"><a href="#763-划分字母区间" class="headerlink" title="763. 划分字母区间"></a>763. 划分字母区间</h3><h3 id="56-合并区间"><a href="#56-合并区间" class="headerlink" title="56. 合并区间"></a>56. 合并区间</h3><hr><h2 id="📡动-态-规-划"><a href="#📡动-态-规-划" class="headerlink" title="📡动 态 规 划"></a>📡动 态 规 划</h2><ul><li><strong>【TODO】</strong></li></ul><hr><h2 id="🧩图-论"><a href="#🧩图-论" class="headerlink" title="🧩图 论"></a>🧩图 论</h2><ul><li><strong>【TODO】</strong></li></ul><hr><h2 id="🎯高-级-数-据-结-构"><a href="#🎯高-级-数-据-结-构" class="headerlink" title="🎯高 级 数 据 结 构"></a>🎯高 级 数 据 结 构</h2><ul><li><strong>【TODO】</strong></li></ul><hr><h2 id="📌增补题目"><a href="#📌增补题目" class="headerlink" title="📌增补题目"></a>📌增补题目</h2><h3 id="91-解码方法"><a href="#91-解码方法" class="headerlink" title="91. 解码方法"></a>91. 解码方法</h3>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>test1 blog</title>
    <link href="/test1-blog/"/>
    <url>/test1-blog/</url>
    
    <content type="html"><![CDATA[<p>TestTestTestTestTestTestTestTest</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/hello-world/"/>
    <url>/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo server<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo generate<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
