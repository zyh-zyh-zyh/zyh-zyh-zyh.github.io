<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>844.比较含退格的字符串</title>
    <link href="/2022/03/31/844-%E6%AF%94%E8%BE%83%E5%90%AB%E9%80%80%E6%A0%BC%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/2022/03/31/844-%E6%AF%94%E8%BE%83%E5%90%AB%E9%80%80%E6%A0%BC%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="844-比较含退格的字符串"><a href="#844-比较含退格的字符串" class="headerlink" title="844.比较含退格的字符串"></a>844.比较含退格的字符串</h1><p>可能思路： 倒序 <strong>【TODO】</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">backspaceCompare</span><span class="hljs-params">(String s, String t)</span> &#123;<br>        <span class="hljs-type">char</span>[] charS = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[s.length()];<br>        <span class="hljs-type">char</span>[] charT = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[t.length()];<br><br>        <span class="hljs-comment">//下一位将要录入的索引值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">countS</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">countT</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <br>        <span class="hljs-comment">// 1.遍历String s，录入到char[] charS</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; s.length(); i++)&#123;<br>            <span class="hljs-type">char</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> s.charAt(i);<br>    <br>            <span class="hljs-comment">// 1.1 非#符号：录入一位char</span><br>            <span class="hljs-keyword">if</span>(value != <span class="hljs-string">&#x27;#&#x27;</span>)&#123;<br>                charS[countS] = value; <br>                countS++;<br>            &#125;<br>    <br>            <span class="hljs-comment">// 1.2 是#符号</span><br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">if</span>(countS &gt; <span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-comment">// 1.2.1 charS索引还未到最左（0），即 删除前一位</span><br>                    countS--;<br>                &#125;<br>                <span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-comment">// 1.2.2 charS索引已到最左（0），即 charS 已经为空 不改变</span><br>                &#125;<br>                <br>            &#125;<br>    <br>        &#125;<br><br><br>        <span class="hljs-comment">// 2.同理遍历String T，录入到char[] charT</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; t.length(); i++)&#123;<br>            <span class="hljs-type">char</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> t.charAt(i);<br>    <br>            <span class="hljs-comment">// 2.1 非#符号：录入一位char</span><br>            <span class="hljs-keyword">if</span>(value != <span class="hljs-string">&#x27;#&#x27;</span>)&#123;<br>                charT[countT] = value; <br>                countT++;<br>            &#125;<br>    <br>            <span class="hljs-comment">// 2.2 是#符号</span><br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">if</span>(countT &gt; <span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-comment">// 2.2.1 charS索引还未到最左（0），即 删除前一位</span><br>                    countT--;<br>                &#125;<br>                <span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-comment">// 2.2.2 charS索引已到最左（0），即 charS 已经为空 不改变</span><br>                &#125;<br>                <br>            &#125;<br>    <br>        &#125;<br><br><br>        <span class="hljs-comment">// 3. 比较charS 前(countS -1)位 与 charT 前(countT -1)位 是否相等</span><br>    <br>        <span class="hljs-comment">// 两char[] 有效长度不等</span><br>        <span class="hljs-keyword">if</span>(countS != countT)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    <br>        <span class="hljs-comment">// 两 char[] 都为空</span><br>        <span class="hljs-keyword">if</span>(countS == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <br>        <span class="hljs-keyword">while</span>(index &lt; countS)&#123;<br>            <span class="hljs-keyword">if</span>(charS[index] != charT[index])&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            index++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/03/31/Solutions/15.%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <url>/2022/03/31/Solutions/15.%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="15-三数之和"><a href="#15-三数之和" class="headerlink" title="15. 三数之和"></a>15. 三数之和</h1><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">threeSum</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        HashMap&lt;Integer, Integer&gt; table = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        HashSet&lt;List&lt;Integer&gt;&gt; resSet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br>        List&lt;List&lt;Integer&gt;&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        <br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k : nums) &#123;<br>            table.put(k, table.getOrDefault(k, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>);<br>        &#125;<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k1 : table.keySet()) &#123;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">isFound</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-comment">//取一个数出来（table 中少一个 k1）</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">value1</span> <span class="hljs-operator">=</span> k1;<br>            table.put(k1, table.get(k1) - <span class="hljs-number">1</span>);<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k2 : table.keySet()) &#123;<br>                <span class="hljs-comment">//第二次取数出来（table 中少一个 k2）</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">count2</span> <span class="hljs-operator">=</span> table.get(k2);<br>                <span class="hljs-keyword">if</span> (count2 != <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">value2</span> <span class="hljs-operator">=</span> k2;<br>                    table.put(k2, count2 - <span class="hljs-number">1</span>);<br><br>                    <span class="hljs-keyword">if</span> (table.get(- k1 - k2) != <span class="hljs-literal">null</span>) &#123;<br>                        <span class="hljs-keyword">if</span> (table.get(-k1 - k2) != <span class="hljs-number">0</span>) &#123;<br>                            isFound = <span class="hljs-literal">true</span>;<br>                            <span class="hljs-type">int</span> <span class="hljs-variable">value3</span> <span class="hljs-operator">=</span> - k1 - k2;<br>                            List&lt;Integer&gt; tmp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>                            tmp.add(value1);<br>                            tmp.add(value2);<br>                            tmp.add(value3);<br>                            Collections.sort(tmp);<br>                            <span class="hljs-comment">//add to result list</span><br>                            <span class="hljs-comment">//list 若为空，则不含重复，直接添加</span><br>                            <span class="hljs-keyword">if</span> (res.isEmpty()) &#123;<br>                                res.add(tmp);<br>                            &#125;<br>                            <span class="hljs-comment">//list 不为空，则判断结果是否已存在</span><br>                            <span class="hljs-keyword">else</span> &#123;<br>                                <span class="hljs-type">boolean</span> <span class="hljs-variable">isExisted</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>                                <span class="hljs-keyword">for</span> (List&lt;Integer&gt; ls : res) &#123;<br>                                    <span class="hljs-keyword">if</span> (ls.equals(tmp)) &#123;<br>                                        isExisted = <span class="hljs-literal">true</span>;<br>                                        <span class="hljs-keyword">break</span>;<br>                                    &#125;<br>                                &#125;<br>                                <span class="hljs-keyword">if</span> (!isExisted) &#123;<br>                                    res.add(tmp);<br>                                &#125;<br>                            &#125;<br>                        &#125; <br>                    &#125;<br>                    <span class="hljs-comment">//放回 k2</span><br>                    table.put(k2, table.get(k2) + <span class="hljs-number">1</span>);<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">//放回 k1</span><br>            table.put(k1, table.get(k1) + <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>优化存储结果的List 改为HashSet</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">threeSum</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        HashMap&lt;Integer, Integer&gt; table = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        HashSet&lt;List&lt;Integer&gt;&gt; resSet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br>        List&lt;List&lt;Integer&gt;&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        <br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k : nums) &#123;<br>            table.put(k, table.getOrDefault(k, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>);<br>        &#125;<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k1 : table.keySet()) &#123;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">isFound</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-comment">//取一个数出来（table 中少一个 k1）</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">value1</span> <span class="hljs-operator">=</span> k1;<br>            table.put(k1, table.get(k1) - <span class="hljs-number">1</span>);<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k2 : table.keySet()) &#123;<br>                <span class="hljs-comment">//第二次取数出来（table 中少一个 k2）</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">count2</span> <span class="hljs-operator">=</span> table.get(k2);<br>                <span class="hljs-keyword">if</span> (count2 != <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">value2</span> <span class="hljs-operator">=</span> k2;<br>                    table.put(k2, count2 - <span class="hljs-number">1</span>);<br><br>                    <span class="hljs-keyword">if</span> (table.get(- k1 - k2) != <span class="hljs-literal">null</span>) &#123;<br>                        <span class="hljs-keyword">if</span> (table.get(-k1 - k2) != <span class="hljs-number">0</span>) &#123;<br>                            isFound = <span class="hljs-literal">true</span>;<br>                            <span class="hljs-type">int</span> <span class="hljs-variable">value3</span> <span class="hljs-operator">=</span> - k1 - k2;<br>                            List&lt;Integer&gt; tmp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>                            tmp.add(value1);<br>                            tmp.add(value2);<br>                            tmp.add(value3);<br>                            Collections.sort(tmp);<br>                            <span class="hljs-comment">//add to result hashset</span><br>                            resSet.add(tmp);<br><br>                            <span class="hljs-comment">// //list 若为空，则不含重复，直接添加</span><br>                            <span class="hljs-comment">// if (res.isEmpty()) &#123;</span><br>                            <span class="hljs-comment">//     res.add(tmp);</span><br>                            <span class="hljs-comment">// &#125;</span><br>                            <span class="hljs-comment">// //list 不为空，则判断结果是否已存在</span><br>                            <span class="hljs-comment">// else &#123;</span><br>                            <span class="hljs-comment">//     boolean isExisted = false;</span><br>                            <span class="hljs-comment">//     for (List&lt;Integer&gt; ls : res) &#123;</span><br>                            <span class="hljs-comment">//         if (ls.equals(tmp)) &#123;</span><br>                            <span class="hljs-comment">//             isExisted = true;</span><br>                            <span class="hljs-comment">//             break;</span><br>                            <span class="hljs-comment">//         &#125;</span><br>                            <span class="hljs-comment">//     &#125;</span><br>                            <span class="hljs-comment">//     if (!isExisted) &#123;</span><br>                            <span class="hljs-comment">//         res.add(tmp);</span><br>                            <span class="hljs-comment">//     &#125;</span><br>                            <span class="hljs-comment">// &#125;</span><br>                        &#125; <br>                    &#125;<br>                    <span class="hljs-comment">//放回 k2</span><br>                    table.put(k2, table.get(k2) + <span class="hljs-number">1</span>);<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">//放回 k1</span><br>            table.put(k1, table.get(k1) + <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (List&lt;Integer&gt; ls : resSet) &#123;<br>            res.add(ls);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>&amp;nbsp;</p><ul><li>不使用哈希表 只使用指针 则三层for循环；</li><li>题目要求不能重复，则 可以先对nums排序 后输出结果，再去重。（如下方法，再加入哈希表去重即可，但复杂度未变 O(N3)）</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">threeSum</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> nums.length;<br>        Arrays.sort(nums);<br><br>        List&lt;List&lt;Integer&gt;&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; a &lt; len; a++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> a + <span class="hljs-number">1</span>; b &lt; len; b++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> b + <span class="hljs-number">1</span>; c &lt; len; c++) &#123;<br>                    <span class="hljs-keyword">if</span> (nums[a] + nums[b] + nums[c] == <span class="hljs-number">0</span>) &#123;<br>                        List&lt;Integer&gt; newList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>                        newList.add(nums[a]);<br>                        newList.add(nums[b]);<br>                        newList.add(nums[c]);<br>                        res.add(newList);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li><p>双指针</p><p>循环a，内部嵌套双指针b,c ，bc共遍历一遍。故总复杂度n2。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">threeSum</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> nums.length;<br>        Arrays.sort(nums);<br><br>        List&lt;List&lt;Integer&gt;&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        List&lt;Integer&gt; preList = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (len &lt; <span class="hljs-number">3</span>) &#123;<span class="hljs-keyword">return</span> res;&#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">preA</span> <span class="hljs-operator">=</span> nums[<span class="hljs-number">0</span>];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; a &lt; len; a++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> len - <span class="hljs-number">1</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">tarV</span> <span class="hljs-operator">=</span> - nums[a];<br>            <span class="hljs-keyword">if</span> (a == <span class="hljs-number">0</span> || nums[a] != preA) &#123;<br>                preA = nums[a];<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> a + <span class="hljs-number">1</span>; b &lt; len; b++) &#123;<br>                    <span class="hljs-keyword">if</span> (b == c) &#123; <span class="hljs-keyword">break</span>;&#125;<br>                    <span class="hljs-comment">// boolean bcEqual = false;</span><br>                    <span class="hljs-comment">//若b为a之后的第一位 或 nums[b] 的值改变, 否则继续循环 b++</span><br>                    <span class="hljs-keyword">if</span> (b == a + <span class="hljs-number">1</span> || nums[b] != nums[b - <span class="hljs-number">1</span>]) &#123;<br>                        <span class="hljs-comment">//c 指针左移，直到tarV 不大于 nums[b] + nums[c]</span><br>                        <span class="hljs-keyword">while</span> (tarV &lt; nums[b] + nums[c]) &#123;<br>                            c--;<br>                            <span class="hljs-keyword">if</span> (b == c) &#123; <span class="hljs-keyword">break</span>;&#125;<br>                        &#125;<br>                        <span class="hljs-keyword">if</span> (b == c) &#123; <span class="hljs-keyword">break</span>;&#125;<br>                        <span class="hljs-keyword">if</span> (tarV == nums[b] + nums[c]) &#123;<br>                            List&lt;Integer&gt; newList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>                            newList.add(nums[a]);<br>                            newList.add(nums[b]);<br>                            newList.add(nums[c]);<br>                            res.add(newList);<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>📝My LeetCode Note</title>
    <link href="/2022/03/31/My-LeetCode-Note/"/>
    <url>/2022/03/31/My-LeetCode-Note/</url>
    
    <content type="html"><![CDATA[<h1 id="📝My-LeetCode-Note"><a href="#📝My-LeetCode-Note" class="headerlink" title="📝My LeetCode Note"></a>📝My LeetCode Note</h1><h2 id="🗺️路线"><a href="#🗺️路线" class="headerlink" title="🗺️路线:"></a>🗺️路线:</h2><ul><li><a href="#%E6%95%B0-%E7%BB%84">🔢数组</a> –&gt; <a href="#%EF%B8%8F%E9%93%BE-%E8%A1%A8">⛓️链表</a> –&gt; <a href="#%E5%93%88-%E5%B8%8C-%E8%A1%A8">🧾哈希表</a> –&gt; <a href="#%E5%AD%97-%E7%AC%A6-%E4%B8%B2">🔡字符串</a> –&gt; <a href="#%EF%B8%8F%E5%8F%8C-%E6%8C%87-%E9%92%88-%E6%B3%95">🈯️双指针法</a>  –&gt; <a href="#%E6%A0%88-%E4%B8%8E-%E9%98%9F-%E5%88%97">🎢栈与队列</a> –&gt; <a href="#%E6%A0%91">🌳树</a> –&gt; <a href="#%E5%9B%9E-%E6%BA%AF">🔙回溯</a> –&gt; <a href="#%E8%B4%AA-%E5%BF%83">💯贪心</a> –&gt; <a href="#%E5%8A%A8-%E6%80%81-%E8%A7%84-%E5%88%92">📡动态规划</a> –&gt; <a href="#%E5%9B%BE-%E8%AE%BA">🧩图论</a> –&gt; <a href="#%E9%AB%98-%E7%BA%A7-%E6%95%B0-%E6%8D%AE-%E7%BB%93-%E6%9E%84">🎯高级数据结构</a></li></ul><span id="more"></span><p>按题型刷完后，再从<code>简单</code>刷起，做了几个类型题目之后，再慢慢做<code>中等</code>题目、<code>困难</code>题目。</p><ul><li><p>路线 from：<a href="https://programmercarl.com/">代码随想录</a></p></li><li><p>题解语言：<code>Java</code></p></li></ul><hr><h2 id="🔢数-组"><a href="#🔢数-组" class="headerlink" title="🔢数 组"></a>🔢数 组</h2><h3 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27. 移除元素"></a>27. 移除元素</h3><ul><li><strong>【TODO】</strong></li></ul><h3 id="26-删除排序数组中的重复项"><a href="#26-删除排序数组中的重复项" class="headerlink" title="26. 删除排序数组中的重复项"></a>26. 删除排序数组中的重复项</h3><ul><li><strong>【TODO】</strong></li></ul><h3 id="283-移动零"><a href="#283-移动零" class="headerlink" title="283. 移动零"></a>283. 移动零</h3><ul><li><strong>【TODO】</strong></li></ul><h3 id="844-比较含退格的字符串"><a href="#844-比较含退格的字符串" class="headerlink" title="844. 比较含退格的字符串"></a><a href="./Solutions/844.%E6%AF%94%E8%BE%83%E5%90%AB%E9%80%80%E6%A0%BC%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2.md">844. 比较含退格的字符串</a></h3><h3 id="977-有序数组的平方"><a href="#977-有序数组的平方" class="headerlink" title="977. 有序数组的平方"></a><a href="./Solutions/977.%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9.md">977. 有序数组的平方</a></h3><h3 id="209-长度最小的子数组"><a href="#209-长度最小的子数组" class="headerlink" title="209. 长度最小的子数组"></a><a href="./Solutions/209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.md">209. 长度最小的子数组</a></h3><h3 id="904-水果成篮"><a href="#904-水果成篮" class="headerlink" title="904. 水果成篮"></a><a href="./Solutions/904.%E6%B0%B4%E6%9E%9C%E6%88%90%E7%AF%AE.md">904. 水果成篮</a></h3><h3 id="76-最小覆盖子串"><a href="#76-最小覆盖子串" class="headerlink" title="76. 最小覆盖子串"></a><a href="./Solutions/76.%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2.md">76. 最小覆盖子串</a></h3><h3 id="59-螺旋矩阵-II"><a href="#59-螺旋矩阵-II" class="headerlink" title="59. 螺旋矩阵 II"></a><a href="./Solutions/59.%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5II.md">59. 螺旋矩阵 II</a></h3><hr><h2 id="⛓️链-表"><a href="#⛓️链-表" class="headerlink" title="⛓️链 表"></a>⛓️链 表</h2><h3 id="203-移除链表元素"><a href="#203-移除链表元素" class="headerlink" title="203. 移除链表元素"></a><a href="./Solutions/203.%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0.md">203. 移除链表元素</a></h3><h3 id="707-设计链表"><a href="#707-设计链表" class="headerlink" title="707. 设计链表"></a><a href="./Solutions/707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8.md">707. 设计链表</a></h3><h3 id="206-反转链表"><a href="#206-反转链表" class="headerlink" title="206. 反转链表"></a><a href="./Solutions/206.%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8.md">206. 反转链表</a></h3><h3 id="24-两两交换链表中的节点"><a href="#24-两两交换链表中的节点" class="headerlink" title="24. 两两交换链表中的节点"></a><a href="./Solutions/24.%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9.md">24. 两两交换链表中的节点</a></h3><h3 id="19-删除链表的倒数第-N-个结点"><a href="#19-删除链表的倒数第-N-个结点" class="headerlink" title="19. 删除链表的倒数第 N 个结点"></a><a href="./Solutions/19.%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E7%BB%93%E7%82%B9.md">19. 删除链表的倒数第 N 个结点</a></h3><h3 id="面试题-02-07-链表相交"><a href="#面试题-02-07-链表相交" class="headerlink" title="面试题 02.07. 链表相交"></a><a href="./Solutions/%E9%9D%A2%E8%AF%95%E9%A2%9802.07.%E9%93%BE%E8%A1%A8%E7%9B%B8%E4%BA%A4.md">面试题 02.07. 链表相交</a></h3><h3 id="142-环形链表II"><a href="#142-环形链表II" class="headerlink" title="142. 环形链表II"></a><a href="./Solutions/142.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II.md">142. 环形链表II</a></h3><hr><h2 id="🧾哈-希-表"><a href="#🧾哈-希-表" class="headerlink" title="🧾哈 希 表"></a>🧾哈 希 表</h2><h3 id="基础："><a href="#基础：" class="headerlink" title="基础："></a>基础：</h3><p><strong>当我们遇到了要快速判断一个元素是否出现集合里的时候，就要考虑哈希法</strong>。</p><p>但是哈希法也是<strong>牺牲了空间换取了时间</strong>，因为我们要使用额外的数组，set或者是map来存放数据，才能实现快速的查找。</p><p>如果在做面试题目的时候遇到需要判断一个元素是否出现过的场景也应该第一时间想到哈希法！</p><p><a href="https://programmercarl.com/%E5%93%88%E5%B8%8C%E8%A1%A8%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html#%E5%B8%B8%E8%A7%81%E7%9A%84%E4%B8%89%E7%A7%8D%E5%93%88%E5%B8%8C%E7%BB%93%E6%9E%84">( from 代码随想录 哈希表理论基础 )</a></p><h3 id="242-有效的字母异位词"><a href="#242-有效的字母异位词" class="headerlink" title="242. 有效的字母异位词"></a><a href="./Solutions/242.%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D.md">242. 有效的字母异位词</a></h3><h3 id="383-赎金信"><a href="#383-赎金信" class="headerlink" title="383. 赎金信"></a><a href="./Solutions/383.%E8%B5%8E%E9%87%91%E4%BF%A1.md">383. 赎金信</a></h3><h3 id="49-字母异位词分组"><a href="#49-字母异位词分组" class="headerlink" title="49. 字母异位词分组"></a><a href="./Solutions/49.%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D%E5%88%86%E7%BB%84.md">49. 字母异位词分组</a></h3><h3 id="438-找到字符串中所有字母异位词"><a href="#438-找到字符串中所有字母异位词" class="headerlink" title="438. 找到字符串中所有字母异位词"></a><a href="./Solutions/438.%E6%89%BE%E5%88%B0%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E6%89%80%E6%9C%89%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D.md">438. 找到字符串中所有字母异位词</a></h3><h3 id="349-两个数组的交集"><a href="#349-两个数组的交集" class="headerlink" title="349. 两个数组的交集"></a><a href="./Solutions/350.%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86II.md">349. 两个数组的交集</a></h3><h3 id="202-快乐数"><a href="#202-快乐数" class="headerlink" title="202. 快乐数"></a><a href="./Solutions/202.%E5%BF%AB%E4%B9%90%E6%95%B0.md">202. 快乐数</a></h3><h3 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1. 两数之和"></a>1. 两数之和</h3><ul><li><strong>【TODO】</strong></li></ul><h3 id="454-四数相加II"><a href="#454-四数相加II" class="headerlink" title="454. 四数相加II"></a><a href="./Solutions/454.%E5%9B%9B%E6%95%B0%E7%9B%B8%E5%8A%A0II.md">454. 四数相加II</a></h3><h3 id="15-三数之和"><a href="#15-三数之和" class="headerlink" title="15. 三数之和"></a><a href="./Solutions/15.%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C.md">15. 三数之和</a></h3><h3 id="18-四数之和"><a href="#18-四数之和" class="headerlink" title="18. 四数之和"></a>18. 四数之和</h3><ul><li><strong>【TODO】</strong></li></ul><hr><h2 id="🔡字-符-串"><a href="#🔡字-符-串" class="headerlink" title="🔡字 符 串"></a>🔡字 符 串</h2><h3 id="344-反转字符串"><a href="#344-反转字符串" class="headerlink" title="344. 反转字符串"></a>344. 反转字符串</h3><ul><li><strong>【TODO】</strong></li></ul><h3 id="541-反转字符串II"><a href="#541-反转字符串II" class="headerlink" title="541. 反转字符串II"></a><a href="./Solutions/541.%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2II.md">541. 反转字符串II</a></h3><h3 id="剑指Offer-05-替换空格"><a href="#剑指Offer-05-替换空格" class="headerlink" title="剑指Offer 05. 替换空格"></a><a href="./Solutions/%E5%89%91%E6%8C%87Offer05.%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC.md">剑指Offer 05. 替换空格</a></h3><h3 id="151-翻转字符串里的单词"><a href="#151-翻转字符串里的单词" class="headerlink" title="151. 翻转字符串里的单词"></a><a href="./Solutions/151.%E7%BF%BB%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%87%8C%E7%9A%84%E5%8D%95%E8%AF%8D.md">151. 翻转字符串里的单词</a></h3><h3 id="剑指Offer58-II-左旋转字符串"><a href="#剑指Offer58-II-左旋转字符串" class="headerlink" title="剑指Offer58-II. 左旋转字符串"></a><a href="./Solutions/%E5%89%91%E6%8C%87Offer58-II.%E5%B7%A6%E6%97%8B%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2.md">剑指Offer58-II. 左旋转字符串</a></h3><h3 id="28-实现-strStr"><a href="#28-实现-strStr" class="headerlink" title="28. 实现 strStr()"></a><a href="./Solutions/28.%E5%AE%9E%E7%8E%B0strStr().md">28. 实现 strStr()</a></h3><h3 id="459-重复的子字符串"><a href="#459-重复的子字符串" class="headerlink" title="459. 重复的子字符串"></a><a href="./Solutions/459.%E9%87%8D%E5%A4%8D%E7%9A%84%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2.md">459. 重复的子字符串</a></h3><hr><h2 id="🈯️双-指-针-法"><a href="#🈯️双-指-针-法" class="headerlink" title="🈯️双 指 针 法"></a>🈯️双 指 针 法</h2><h3 id="27-移除元素-1"><a href="#27-移除元素-1" class="headerlink" title="27. 移除元素"></a><a href="./Solutions/27.%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0.md">27. 移除元素</a></h3><h3 id="344-反转字符串-1"><a href="#344-反转字符串-1" class="headerlink" title="344. 反转字符串"></a><a href="./Solutions/344.%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2.md">344. 反转字符串</a></h3><h3 id="151-翻转字符串里的单词-1"><a href="#151-翻转字符串里的单词-1" class="headerlink" title="151.翻转字符串里的单词"></a>151.翻转字符串里的单词</h3><h3 id="206-反转链表-1"><a href="#206-反转链表-1" class="headerlink" title="206.反转链表"></a>206.反转链表</h3><h3 id="19-删除链表的倒数第N个节点"><a href="#19-删除链表的倒数第N个节点" class="headerlink" title="19.删除链表的倒数第N个节点"></a>19.删除链表的倒数第N个节点</h3><h3 id="面试题-02-07-链表相交-1"><a href="#面试题-02-07-链表相交-1" class="headerlink" title="面试题 02.07. 链表相交"></a>面试题 02.07. 链表相交</h3><h3 id="142-环形链表II-1"><a href="#142-环形链表II-1" class="headerlink" title="142.环形链表II"></a>142.环形链表II</h3><h3 id="15-三数之和-1"><a href="#15-三数之和-1" class="headerlink" title="15. 三数之和"></a>15. 三数之和</h3><h3 id="18-四数之和-1"><a href="#18-四数之和-1" class="headerlink" title="18. 四数之和"></a>18. 四数之和</h3><hr><h2 id="🎢栈-与-队-列"><a href="#🎢栈-与-队-列" class="headerlink" title="🎢栈 与 队 列"></a>🎢栈 与 队 列</h2><h3 id="232-用栈实现队列"><a href="#232-用栈实现队列" class="headerlink" title="232. 用栈实现队列"></a><a href="./Solutions/232.%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97.md">232. 用栈实现队列</a></h3><h3 id="225-用队列实现栈"><a href="#225-用队列实现栈" class="headerlink" title="225. 用队列实现栈"></a><a href="./Solutions/225.%E7%94%A8%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88.md">225. 用队列实现栈</a></h3><h3 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20. 有效的括号"></a><a href="./Solutions/20.%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7.md">20. 有效的括号</a></h3><h3 id="1047-删除字符串中的所有相邻重复项"><a href="#1047-删除字符串中的所有相邻重复项" class="headerlink" title="1047. 删除字符串中的所有相邻重复项"></a><a href="./Solutions/1047.%E5%88%A0%E9%99%A4%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E7%9B%B8%E9%82%BB%E9%87%8D%E5%A4%8D%E9%A1%B9.md">1047. 删除字符串中的所有相邻重复项</a></h3><h3 id="150-逆波兰表达式求值"><a href="#150-逆波兰表达式求值" class="headerlink" title="150. 逆波兰表达式求值"></a><a href="./Solutions/150.%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC.md">150. 逆波兰表达式求值</a></h3><h3 id="239-滑动窗口最大值"><a href="#239-滑动窗口最大值" class="headerlink" title="239. 滑动窗口最大值"></a><a href="./Solutions/239.%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC.md">239. 滑动窗口最大值</a></h3><h3 id="347-前K个高频元素"><a href="#347-前K个高频元素" class="headerlink" title="347. 前K个高频元素"></a><a href="./Solutions/347.%E5%89%8DK%E4%B8%AA%E9%AB%98%E9%A2%91%E5%85%83%E7%B4%A0.md">347. 前K个高频元素</a></h3><h3 id="栈与队列总结"><a href="#栈与队列总结" class="headerlink" title="栈与队列总结"></a>栈与队列总结</h3><ul><li><strong>【TODO】</strong></li></ul><hr><h2 id="🌳树"><a href="#🌳树" class="headerlink" title="🌳树"></a>🌳树</h2><h3 id="144-二叉树的前序遍历"><a href="#144-二叉树的前序遍历" class="headerlink" title="144. 二叉树的前序遍历"></a><a href="./Solutions/144.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86.md">144. 二叉树的前序遍历</a></h3><h3 id="145-二叉树的后序遍历"><a href="#145-二叉树的后序遍历" class="headerlink" title="145. 二叉树的后序遍历"></a><a href="./Solutions/145.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86.md">145. 二叉树的后序遍历</a></h3><h3 id="94-二叉树的中序遍历"><a href="#94-二叉树的中序遍历" class="headerlink" title="94. 二叉树的中序遍历"></a><a href="./Solutions/94.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86.md">94. 二叉树的中序遍历</a></h3><h3 id="102-二叉树的层序遍历"><a href="#102-二叉树的层序遍历" class="headerlink" title="102. 二叉树的层序遍历"></a><a href="./Solutions/102.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86.md">102. 二叉树的层序遍历</a></h3><h3 id="226-翻转二叉树"><a href="#226-翻转二叉树" class="headerlink" title="226. 翻转二叉树"></a><a href="./Solutions/226.%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91.md">226. 翻转二叉树</a></h3><h3 id="101-对称二叉树"><a href="#101-对称二叉树" class="headerlink" title="101. 对称二叉树"></a><a href="./Solutions/101.%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91.md">101. 对称二叉树</a></h3><h3 id="104-二叉树的最大深度"><a href="#104-二叉树的最大深度" class="headerlink" title="104. 二叉树的最大深度"></a><a href="./Solutions/104.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6.md">104. 二叉树的最大深度</a></h3><h3 id="559-n叉树的最大深度"><a href="#559-n叉树的最大深度" class="headerlink" title="559. n叉树的最大深度"></a>559. n叉树的最大深度</h3><h3 id="111-二叉树的最小深度"><a href="#111-二叉树的最小深度" class="headerlink" title="111. 二叉树的最小深度"></a><a href="./Solutions/111.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E6%B7%B1%E5%BA%A6.md">111. 二叉树的最小深度</a></h3><h3 id="222-完全二叉树的节点个数"><a href="#222-完全二叉树的节点个数" class="headerlink" title="222. 完全二叉树的节点个数"></a><a href="./Solutions/222.%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E8%8A%82%E7%82%B9%E4%B8%AA%E6%95%B0.md">222. 完全二叉树的节点个数</a></h3><h3 id="110-平衡二叉树"><a href="#110-平衡二叉树" class="headerlink" title="110. 平衡二叉树"></a><a href="./Solutions/110.%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91.md">110. 平衡二叉树</a></h3><h3 id="257-二叉树的所有路径"><a href="#257-二叉树的所有路径" class="headerlink" title="257. 二叉树的所有路径"></a><a href="./Solutions/257.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%89%80%E6%9C%89%E8%B7%AF%E5%BE%84.md">257. 二叉树的所有路径</a></h3><h3 id="404-左叶子之和"><a href="#404-左叶子之和" class="headerlink" title="404. 左叶子之和"></a><a href="./Solutions/404.%E5%B7%A6%E5%8F%B6%E5%AD%90%E4%B9%8B%E5%92%8C.md">404. 左叶子之和</a></h3><h3 id="513-找树左下角的值"><a href="#513-找树左下角的值" class="headerlink" title="513. 找树左下角的值"></a><a href="./Solutions/513.%E6%89%BE%E6%A0%91%E5%B7%A6%E4%B8%8B%E8%A7%92%E7%9A%84%E5%80%BC.md">513. 找树左下角的值</a></h3><h3 id="112-路径总和"><a href="#112-路径总和" class="headerlink" title="112. 路径总和"></a><a href="./Solutions/112.%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8C.md">112. 路径总和</a></h3><h3 id="106-从中序与后序遍历序列构造二叉树"><a href="#106-从中序与后序遍历序列构造二叉树" class="headerlink" title="106. 从中序与后序遍历序列构造二叉树"></a>106. 从中序与后序遍历序列构造二叉树</h3><h3 id="654-最大二叉树"><a href="#654-最大二叉树" class="headerlink" title="654. 最大二叉树"></a><a href="./Solutions/654.%E6%9C%80%E5%A4%A7%E4%BA%8C%E5%8F%89%E6%A0%91.md">654. 最大二叉树</a></h3><h3 id="617-合并二叉树"><a href="#617-合并二叉树" class="headerlink" title="617. 合并二叉树"></a><a href="./Solutions/617.%E5%90%88%E5%B9%B6%E4%BA%8C%E5%8F%89%E6%A0%91.md">617. 合并二叉树</a></h3><h3 id="700-二叉搜索树中的搜索"><a href="#700-二叉搜索树中的搜索" class="headerlink" title="700. 二叉搜索树中的搜索"></a><a href="./Solutions/700.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E6%90%9C%E7%B4%A2.md">700. 二叉搜索树中的搜索</a></h3><h3 id="98-验证二叉搜索树"><a href="#98-验证二叉搜索树" class="headerlink" title="98. 验证二叉搜索树"></a><a href="./Solutions/98.%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91.md">98. 验证二叉搜索树</a></h3><h3 id="530-二叉搜索树的最小绝对差"><a href="#530-二叉搜索树的最小绝对差" class="headerlink" title="530. 二叉搜索树的最小绝对差"></a><a href="./Solutions/530.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E7%BB%9D%E5%AF%B9%E5%B7%AE.md">530. 二叉搜索树的最小绝对差</a></h3><h3 id="501-二叉搜索树中的众数"><a href="#501-二叉搜索树中的众数" class="headerlink" title="501. 二叉搜索树中的众数"></a><a href="./Solutions/501.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E4%BC%97%E6%95%B0.md">501. 二叉搜索树中的众数</a></h3><h3 id="236-二叉树的最近公共祖先"><a href="#236-二叉树的最近公共祖先" class="headerlink" title="236. 二叉树的最近公共祖先"></a><a href="./Solutions/236.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88.md">236. 二叉树的最近公共祖先</a></h3><h3 id="235-二叉搜索树的最近公共祖先"><a href="#235-二叉搜索树的最近公共祖先" class="headerlink" title="235. 二叉搜索树的最近公共祖先"></a><a href="./Solutions/235.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88.md">235. 二叉搜索树的最近公共祖先</a></h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><br></code></pre></div></td></tr></table></figure><h3 id="701-二叉搜索树中的插入操作"><a href="#701-二叉搜索树中的插入操作" class="headerlink" title="701. 二叉搜索树中的插入操作"></a><a href="./Solutions/701.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C.md">701. 二叉搜索树中的插入操作</a></h3><h3 id="450-删除二叉搜索树中的节点"><a href="#450-删除二叉搜索树中的节点" class="headerlink" title="450. 删除二叉搜索树中的节点"></a><a href="./Solutions/450.%E5%88%A0%E9%99%A4%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9.md">450. 删除二叉搜索树中的节点</a></h3><h3 id="669-修剪二叉搜索树"><a href="#669-修剪二叉搜索树" class="headerlink" title="669. 修剪二叉搜索树"></a><a href="./Solutions/669.%E4%BF%AE%E5%89%AA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91.md">669. 修剪二叉搜索树</a></h3><h3 id="108-将有序数组转换为二叉搜索树"><a href="#108-将有序数组转换为二叉搜索树" class="headerlink" title="108. 将有序数组转换为二叉搜索树"></a><a href="./Solutions/108.%E5%B0%86%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E8%BD%AC%E6%8D%A2%E4%B8%BA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91.md">108. 将有序数组转换为二叉搜索树</a></h3><h3 id="538-把二叉搜索树转换为累加树"><a href="#538-把二叉搜索树转换为累加树" class="headerlink" title="538. 把二叉搜索树转换为累加树"></a><a href="./Solutions/538.%E6%8A%8A%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E8%BD%AC%E6%8D%A2%E4%B8%BA%E7%B4%AF%E5%8A%A0%E6%A0%91.md">538. 把二叉搜索树转换为累加树</a></h3><hr><h2 id="🔙回-溯"><a href="#🔙回-溯" class="headerlink" title="🔙回 溯"></a>🔙回 溯</h2><h3 id="77-组合"><a href="#77-组合" class="headerlink" title="77. 组合"></a><a href="./Solutions/77.%E7%BB%84%E5%90%88.md">77. 组合</a></h3><h3 id="216-组合总和-III-x2F-Solutions-x2F-216-组合总和-III-md"><a href="#216-组合总和-III-x2F-Solutions-x2F-216-组合总和-III-md" class="headerlink" title="[216. 组合总和 III](.&#x2F;Solutions&#x2F;216.组合总和 III.md)"></a>[216. 组合总和 III](.&#x2F;Solutions&#x2F;216.组合总和 III.md)</h3><h3 id="17-电话号码的字母组合"><a href="#17-电话号码的字母组合" class="headerlink" title="17. 电话号码的字母组合"></a><a href="./Solutions/17.%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88.md">17. 电话号码的字母组合</a></h3><h3 id="39-组合总和"><a href="#39-组合总和" class="headerlink" title="39. 组合总和"></a><a href="./Solutions/39.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C.md">39. 组合总和</a></h3><h3 id="40-组合总和II"><a href="#40-组合总和II" class="headerlink" title="40. 组合总和II"></a><a href="./Solutions/40.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CII.md">40. 组合总和II</a></h3><h3 id="131-分割回文串"><a href="#131-分割回文串" class="headerlink" title="131. 分割回文串"></a><a href="./Solutions/131.%E5%88%86%E5%89%B2%E5%9B%9E%E6%96%87%E4%B8%B2.md">131. 分割回文串</a></h3><h3 id="93-复原IP地址"><a href="#93-复原IP地址" class="headerlink" title="93. 复原IP地址"></a><a href="./Solutions/93.%E5%A4%8D%E5%8E%9FIP%E5%9C%B0%E5%9D%80.md">93. 复原IP地址</a></h3><h3 id="78-子集问题"><a href="#78-子集问题" class="headerlink" title="78. 子集问题"></a><a href="./Solutions/78.%E5%AD%90%E9%9B%86%E9%97%AE%E9%A2%98.md">78. 子集问题</a></h3><h3 id="90-子集II"><a href="#90-子集II" class="headerlink" title="90. 子集II"></a><a href="./Solutions/90.%E5%AD%90%E9%9B%86II.md">90. 子集II</a></h3><h3 id="491-递增子序列"><a href="#491-递增子序列" class="headerlink" title="491. 递增子序列"></a><a href="./Solutions/491.%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97.md">491. 递增子序列</a></h3><h3 id="46-全排列"><a href="#46-全排列" class="headerlink" title="46. 全排列"></a><a href="./Solutions/446.%E5%85%A8%E6%8E%92%E5%88%97.md">46. 全排列</a></h3><h3 id="47-全排列II"><a href="#47-全排列II" class="headerlink" title="47. 全排列II"></a><a href="./Solutions/47.%E5%85%A8%E6%8E%92%E5%88%97II.md">47. 全排列II</a></h3><h3 id="332-重新安排行程"><a href="#332-重新安排行程" class="headerlink" title="332. 重新安排行程"></a><a href="./Solutions/332.%E9%87%8D%E6%96%B0%E5%AE%89%E6%8E%92%E8%A1%8C%E7%A8%8B.md">332. 重新安排行程</a></h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><br></code></pre></div></td></tr></table></figure><h3 id="51-N皇后"><a href="#51-N皇后" class="headerlink" title="51. N皇后"></a>51. N皇后</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><br></code></pre></div></td></tr></table></figure><h3 id="37-解数独"><a href="#37-解数独" class="headerlink" title="37. 解数独"></a>37. 解数独</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><br></code></pre></div></td></tr></table></figure><hr><h2 id="💯贪-心"><a href="#💯贪-心" class="headerlink" title="💯贪 心"></a>💯贪 心</h2><h3 id="455-分发饼干"><a href="#455-分发饼干" class="headerlink" title="455. 分发饼干"></a><a href="./Solutions/455.%E5%88%86%E5%8F%91%E9%A5%BC%E5%B9%B2.md">455. 分发饼干</a></h3><h3 id="376-摆动序列"><a href="#376-摆动序列" class="headerlink" title="376. 摆动序列"></a><a href="./Solutions/376.%E6%91%86%E5%8A%A8%E5%BA%8F%E5%88%97.md">376. 摆动序列</a></h3><h3 id="53-最大子序和"><a href="#53-最大子序和" class="headerlink" title="53. 最大子序和"></a><a href="./Solutions/53.%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C.md">53. 最大子序和</a></h3><h3 id="122-买卖股票的最佳时机II"><a href="#122-买卖股票的最佳时机II" class="headerlink" title="122. 买卖股票的最佳时机II"></a>122. 买卖股票的最佳时机II</h3><h3 id="55-跳跃游戏"><a href="#55-跳跃游戏" class="headerlink" title="55. 跳跃游戏"></a>55. 跳跃游戏</h3><h3 id="45-跳跃游戏II"><a href="#45-跳跃游戏II" class="headerlink" title="45. 跳跃游戏II"></a>45. 跳跃游戏II</h3><h3 id="134-加油站"><a href="#134-加油站" class="headerlink" title="134. 加油站"></a>134. 加油站</h3><h3 id="135-分发糖果"><a href="#135-分发糖果" class="headerlink" title="135. 分发糖果"></a>135. 分发糖果</h3><h3 id="860-柠檬水找零"><a href="#860-柠檬水找零" class="headerlink" title="860. 柠檬水找零"></a>860. 柠檬水找零</h3><h3 id="435-无重叠区间"><a href="#435-无重叠区间" class="headerlink" title="435. 无重叠区间"></a>435. 无重叠区间</h3><h3 id="763-划分字母区间"><a href="#763-划分字母区间" class="headerlink" title="763. 划分字母区间"></a>763. 划分字母区间</h3><h3 id="56-合并区间"><a href="#56-合并区间" class="headerlink" title="56. 合并区间"></a>56. 合并区间</h3><hr><h2 id="📡动-态-规-划"><a href="#📡动-态-规-划" class="headerlink" title="📡动 态 规 划"></a>📡动 态 规 划</h2><ul><li><strong>【TODO】</strong></li></ul><hr><h2 id="🧩图-论"><a href="#🧩图-论" class="headerlink" title="🧩图 论"></a>🧩图 论</h2><ul><li><strong>【TODO】</strong></li></ul><hr><h2 id="🎯高-级-数-据-结-构"><a href="#🎯高-级-数-据-结-构" class="headerlink" title="🎯高 级 数 据 结 构"></a>🎯高 级 数 据 结 构</h2><ul><li><strong>【TODO】</strong></li></ul><hr><h2 id="📌增补题目"><a href="#📌增补题目" class="headerlink" title="📌增补题目"></a>📌增补题目</h2><h3 id="91-解码方法"><a href="#91-解码方法" class="headerlink" title="91. 解码方法"></a>91. 解码方法</h3>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>test1 blog</title>
    <link href="/2022/03/31/test1-blog/"/>
    <url>/2022/03/31/test1-blog/</url>
    
    <content type="html"><![CDATA[<p>TestTestTestTestTestTestTestTest</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/03/31/hello-world/"/>
    <url>/2022/03/31/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo server<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo generate<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
